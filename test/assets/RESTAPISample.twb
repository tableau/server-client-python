<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10000.16.0710.2230                               -->
<workbook source-build='10.0.0 (10000.16.0710.2230)' source-platform='win' version='10.0' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <style-theme name='clean' />
  <datasources>
    <datasource caption='World Indicators' inline='true' name='World Indicators new' version='10.0'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='World Indicators' name='World Indicators newleaf'>
            <connection class='dataengine' dbname='Data/Tableau Samples/World Indicators.tde' schema='Extract' tablename='Extract'>
              <calculations>
                <calculation column='[Number of Records]' formula='1' />
              </calculations>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='World Indicators newleaf' name='Extract' table='[Extract].[Extract]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country / Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country / Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Country / Region</remote-alias>
            <ordinal>0</ordinal>
            <family>DATA$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>209</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Afghanistan&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Zimbabwe&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>135</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>1</ordinal>
            <family>DATA$</family>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <approx-count>11</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='datetime'>#2000-07-01 00:00:00#</statistic>
              <statistic aggregation='Max' datatype='datetime'>#2010-07-01 00:00:00#</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F: Deposit interest rate (%)</remote-name>
            <remote-type>4</remote-type>
            <local-name>[F: Deposit interest rate (%)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>F: Deposit interest rate (%)</remote-alias>
            <ordinal>2</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>50</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>203.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F: GDP (curr $)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[F: GDP (curr $)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>F: GDP (curr $)</remote-alias>
            <ordinal>3</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>2120</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>63810762.0</statistic>
              <statistic aggregation='Max' datatype='real'>14447100000000.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>10</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F: GDP per capita (curr $)</remote-name>
            <remote-type>4</remote-type>
            <local-name>[F: GDP per capita (curr $)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>F: GDP per capita (curr $)</remote-alias>
            <ordinal>4</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1877</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>87.0</statistic>
              <statistic aggregation='Max' datatype='real'>186243.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>9</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F: Lending interest rate (%)</remote-name>
            <remote-type>4</remote-type>
            <local-name>[F: Lending interest rate (%)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>F: Lending interest rate (%)</remote-alias>
            <ordinal>5</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>72</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>1.0</statistic>
              <statistic aggregation='Max' datatype='real'>496.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>H: Health exp (% GDP)</remote-name>
            <remote-type>4</remote-type>
            <local-name>[H: Health exp (% GDP)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>H: Health exp (% GDP)</remote-alias>
            <ordinal>6</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>22</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>0.0</statistic>
              <statistic aggregation='Max' datatype='real'>20.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>H: Health exp/cap (curr $)</remote-name>
            <remote-type>4</remote-type>
            <local-name>[H: Health exp/cap (curr $)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>H: Health exp/cap (curr $)</remote-alias>
            <ordinal>7</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>936</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>3.0</statistic>
              <statistic aggregation='Max' datatype='real'>8362.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>H: Life exp (years)</remote-name>
            <remote-type>4</remote-type>
            <local-name>[H: Life exp (years)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>H: Life exp (years)</remote-alias>
            <ordinal>8</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>45</approx-count>
            <contains-null>true</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>40.0</statistic>
              <statistic aggregation='Max' datatype='real'>83.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;float&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>16</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>1</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='integer'>1</statistic>
              <statistic aggregation='Max' datatype='integer'>1</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>P: Population (count)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[P: Population (count)]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>P: Population (count)</remote-alias>
            <ordinal>10</ordinal>
            <family>DATA$</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>2295</approx-count>
            <contains-null>false</contains-null>
            <statistics>
              <statistic aggregation='Min' datatype='real'>18873.0</statistic>
              <statistic aggregation='Max' datatype='real'>1337825000.0</statistic>
            </statistics>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>11</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>11</ordinal>
            <family>DATA$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>6</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>false</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Africa&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;The Americas&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Subregion</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Subregion]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Subregion</remote-alias>
            <ordinal>12</ordinal>
            <family>DATA$</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>12</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <statistics>
              <statistic aggregation='Min' datatype='string'>&quot;Caribbean&quot;</statistic>
              <statistic aggregation='Max' datatype='string'>&quot;Western Africa&quot;</statistic>
            </statistics>
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US_CI&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[World Indicators new].[avg:H: Life exp (years):qk]&quot;' value='Life Expectancy' />
          <alias key='&quot;[World Indicators new].[rank:avg:H: Life exp (years):qk]&quot;' value='Rank of Life Expectancy' />
          <alias key='&quot;[World Indicators new].[rank:sum:F: GDP (curr $):qk]&quot;' value='Rank GDP (curr $)' />
          <alias key='&quot;[World Indicators new].[rank:sum:F: GDP per capita (curr $):qk]&quot;' value='Rank of GDP per capita' />
          <alias key='&quot;[World Indicators new].[rank:sum:P: Population (count):qk]&quot;' value='Rank of Population' />
          <alias key='&quot;[World Indicators new].[sum:F: GDP (curr $):qk]&quot;' value='GDP (US $&apos;s)' />
          <alias key='&quot;[World Indicators new].[sum:F: GDP per capita (curr $):qk]&quot;' value='GDP per Capita' />
          <alias key='&quot;[World Indicators new].[sum:P: Population (count):qk]&quot;' value='Population' />
        </aliases>
      </column>
      <column caption='GDP % of Total' datatype='real' default-format='p0%' name='[Calculation1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='AVG([F: GDP per capita (curr $)]) / TOTAL(AVG([F: GDP per capita (curr $)]))' scope-isolation='false'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='GDP per capita (weighted)' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Calculation_1590906174513693]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([F: GDP (curr $)])&#13;&#10;/&#13;&#10;SUM([P: Population (count)])' scope-isolation='false' />
      </column>
      <column caption='Rate spread (difference)' datatype='real' name='[Calculation_8570907072742130]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='AVG([F: Lending interest rate (%)])-AVG([F: Deposit interest rate (%)])' scope-isolation='false' />
      </column>
      <column datatype='string' name='[Country / Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
      <column aggregation='Avg' caption='Deposit interest rate (%)' datatype='real' name='[F: Deposit interest rate (%)]' role='measure' type='quantitative' />
      <column aggregation='Avg' caption='GDP (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,,,.00B;(&quot;$&quot;#,##0,,,.00B)' name='[F: GDP (curr $)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run bold='true'>Gross Domestic Product</run>
            <run> in current US Dollars</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='GDP per capita (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[F: GDP per capita (curr $)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run bold='true'>Gross Domestic Product</run>
            <run> per capita</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Avg' caption='Lending interest rate (%)' datatype='real' name='[F: Lending interest rate (%)]' role='measure' type='quantitative' />
      <column caption='Health exp (% GDP)' datatype='real' datatype-customized='true' name='[H: Health exp (% GDP)]' role='measure' type='quantitative' />
      <column caption='Health exp/cap (curr $)' datatype='real' datatype-customized='true' default-format='c&quot;$&quot;#,##0,,,.0B;(&quot;$&quot;#,##0,,,.0B)' name='[H: Health exp/cap (curr $)]' role='measure' type='quantitative' />
      <column aggregation='Avg' caption='Life exp (years)' datatype='real' default-format='n#,##0;-#,##0' name='[H: Life exp (years)]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Population (count)' datatype='real' name='[P: Population (count)]' role='measure' type='quantitative' />
      <column datatype='string' name='[Region]' role='dimension' type='nominal' />
      <column datatype='string' name='[Subregion]' role='dimension' type='nominal'>
        <aliases>
          <alias key='%null%' value=' ' />
        </aliases>
      </column>
      <column-instance column='[H: Life exp (years)]' derivation='Avg' name='[avg:H: Life exp (years):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country / Region]' derivation='None' name='[none:Country / Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[H: Life exp (years)]' derivation='Avg' name='[rank:avg:H: Life exp (years):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[F: GDP (curr $)]' derivation='Sum' name='[rank:sum:F: GDP (curr $):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[F: GDP per capita (curr $)]' derivation='Sum' name='[rank:sum:F: GDP per capita (curr $):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[P: Population (count)]' derivation='Sum' name='[rank:sum:P: Population (count):qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[F: GDP (curr $)]' derivation='Sum' name='[sum:F: GDP (curr $):qk]' pivot='key' type='quantitative' />
      <column-instance column='[F: GDP per capita (curr $)]' derivation='Sum' name='[sum:F: GDP per capita (curr $):qk]' pivot='key' type='quantitative' />
      <column-instance column='[P: Population (count)]' derivation='Sum' name='[sum:P: Population (count):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Year-Trunc' name='[tyr:Date:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Action (Country Name)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country / Region]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Date (year))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Date]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Region)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Region]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (YEAR(Date (year)))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Date:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[[Exclusions (Country Name,YEAR(Date (year)))]]]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Country / Region:nk]' />
          <groupfilter function='level-members' level='[tyr:Date:qk]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Location'>
          <field>[Region]</field>
          <field>[Subregion]</field>
          <field>[Country / Region]</field>
        </drill-path>
      </drill-paths>
      <folder name='Financial' role='measures'>
        <folder-item name='[Calculation1]' type='field' />
        <folder-item name='[Calculation_1590906174513693]' type='field' />
        <folder-item name='[Calculation_8570907072742130]' type='field' />
        <folder-item name='[F: Deposit interest rate (%)]' type='field' />
        <folder-item name='[F: GDP (curr $)]' type='field' />
        <folder-item name='[F: GDP per capita (curr $)]' type='field' />
        <folder-item name='[F: Lending interest rate (%)]' type='field' />
      </folder>
      <folder name='Health' role='measures'>
        <folder-item name='[H: Health exp (% GDP)]' type='field' />
        <folder-item name='[H: Health exp/cap (curr $)]' type='field' />
        <folder-item name='[H: Life exp (years)]' type='field' />
      </folder>
      <folder name='Population' role='measures'>
        <folder-item name='[P: Population (count)]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.428463' measure-ordering='alphabetic' measure-percentage='0.571537' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Region:nk]' palette='tableau-10' type='palette'>
            <map to='#67bf5c'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#729ece'>
              <bucket>&quot;The Americas&quot;</bucket>
            </map>
            <map to='#a8786e'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#ad8bc9'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#ed665d'>
              <bucket>&quot;Middle East&quot;</bucket>
            </map>
            <map to='#ff9e4a'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <sort class='manual' column='[none:Region:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Europe&quot;</bucket>
            <bucket>&quot;Middle East&quot;</bucket>
            <bucket>&quot;The Americas&quot;</bucket>
            <bucket>&quot;Oceania&quot;</bucket>
            <bucket>&quot;Asia&quot;</bucket>
            <bucket>&quot;Africa&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight by region' name='[Action1]'>
      <activation auto-clear='true' type='on-hover' />
      <source dashboard='GDP per Capita Dashboard' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Region' />
        <param name='target' value='GDP per Capita Dashboard' />
      </command>
    </action>
    <action caption='Filter to year' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='GDP per Capita Dashboard' type='sheet' worksheet='GDP per capita by region' />
      <link caption='Filter to year' delimiter=',' escape='\' expression='tsl:GDP%20per%20Capita%20Dashboard?%5BWorld%20Indicators%20new%5D.%5Byr%3ADate%3Aok%5D~s0=&lt;YEAR([Date])~na&gt;' include-null='true' multi-select='true' url-escape='true' />
      <command command='tsc:tsl-filter'>
        <param name='exclude' value='GDP per capita by region' />
        <param name='target' value='GDP per Capita Dashboard' />
      </command>
    </action>
    <action caption='Highlight Country' name='[Action3]'>
      <activation auto-clear='true' type='on-hover' />
      <source type='sheet' worksheet='Health spending vs life expectancy' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Country / Region' />
        <param name='target' value='Health spending vs life expectancy' />
      </command>
    </action>
    <action caption='Highlight 3 (generated)' name='[Action4]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='GDP per capita' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Region' />
        <param name='target' value='GDP per capita' />
      </command>
    </action>
    <action caption='Highlight Subregion' name='[Action5]'>
      <activation auto-clear='true' type='on-hover' />
      <source type='sheet' worksheet='GDP per capita map' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Region,Subregion' />
        <param name='target' value='GDP per capita map' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action6]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='GDP per capita by region' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Region' />
        <param name='target' value='GDP per capita by region' />
      </command>
    </action>
    <datasources>
      <datasource caption='World Indicators' name='World Indicators new' />
    </datasources>
    <datasource-dependencies datasource='World Indicators new'>
      <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
      <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='Country ranks'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Country ranks by GDP, GDP per Capita, Population, and Life Expectancy</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='World Indicators' name='World Indicators new' />
          </datasources>
          <datasource-dependencies datasource='World Indicators new'>
            <column datatype='string' name='[Country / Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
            <column aggregation='Avg' caption='GDP (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,,,.00B;(&quot;$&quot;#,##0,,,.00B)' name='[F: GDP (curr $)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run bold='true'>Gross Domestic Product</run>
                  <run> in current US Dollars</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='GDP per capita (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[F: GDP per capita (curr $)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run bold='true'>Gross Domestic Product</run>
                  <run> per capita</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Life exp (years)' datatype='real' default-format='n#,##0;-#,##0' name='[H: Life exp (years)]' role='measure' type='quantitative' />
            <column caption='Population (count)' datatype='real' name='[P: Population (count)]' role='measure' type='quantitative' />
            <column-instance column='[H: Life exp (years)]' derivation='Avg' name='[avg:H: Life exp (years):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country / Region]' derivation='None' name='[none:Country / Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[F: GDP (curr $)]' derivation='None' name='[none:F: GDP (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[H: Life exp (years)]' derivation='Avg' name='[rank:avg:H: Life exp (years):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
            </column-instance>
            <column-instance column='[F: GDP (curr $)]' derivation='Sum' name='[rank:sum:F: GDP (curr $):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
            </column-instance>
            <column-instance column='[F: GDP per capita (curr $)]' derivation='Sum' name='[rank:sum:F: GDP per capita (curr $):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
            </column-instance>
            <column-instance column='[P: Population (count)]' derivation='Sum' name='[rank:sum:P: Population (count):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
            </column-instance>
            <column-instance column='[F: GDP (curr $)]' derivation='Sum' name='[sum:F: GDP (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[F: GDP per capita (curr $)]' derivation='Sum' name='[sum:F: GDP per capita (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[P: Population (count)]' derivation='Sum' name='[sum:P: Population (count):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[World Indicators new].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[sum:F: GDP (curr $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[rank:sum:F: GDP (curr $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[sum:F: GDP per capita (curr $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[rank:sum:F: GDP per capita (curr $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[sum:P: Population (count):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[rank:sum:P: Population (count):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[avg:H: Life exp (years):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[rank:avg:H: Life exp (years):qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[World Indicators new].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[World Indicators new].[sum:F: GDP (curr $):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[rank:sum:F: GDP (curr $):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[sum:F: GDP per capita (curr $):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[rank:sum:F: GDP per capita (curr $):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[sum:P: Population (count):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[rank:sum:P: Population (count):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[avg:H: Life exp (years):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[rank:avg:H: Life exp (years) (copy):qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='computed' column='[World Indicators new].[none:Country / Region:nk]' direction='DESC' using='[World Indicators new].[sum:F: GDP (curr $):qk]' />
          <filter class='quantitative' column='[World Indicators new].[none:F: GDP (curr $):qk]' included-values='non-null' />
          <filter class='categorical' column='[World Indicators new].[yr:Date:ok]'>
            <groupfilter function='member' level='[yr:Date:ok]' member='2010' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[World Indicators new].[:Measure Names]</column>
            <column>[World Indicators new].[yr:Date:ok]</column>
            <column>[World Indicators new].[none:F: GDP (curr $):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[World Indicators new].[:Measure Names]' value='84' />
            <format attr='text-align' field='[World Indicators new].[Multiple Values]' value='center' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[World Indicators new].[:Measure Names]' value='48' />
            <format attr='width' field='[World Indicators new].[none:Country / Region:nk]' value='128' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-align' field='[World Indicators new].[:Measure Names]' value='center' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='title'>
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[World Indicators new].[yr:Date:ok]' value='Year' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[World Indicators new].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true' fontsize='12'>&lt;[World Indicators new].[none:Country / Region:nk]&gt;</run>
                <run bold='true'>Æ&#10;</run>
                <run fontcolor='#686868'>&lt;[World Indicators new].[:Measure Names]&gt;:</run>
                <run bold='true'> &lt;[World Indicators new].[Multiple Values]&gt;&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[World Indicators new].[none:Country / Region:nk]</rows>
        <cols>[World Indicators new].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='GDP per capita'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='11'>&lt;</run>
            <run fontsize='11'>[World Indicators new].[yr:Date:ok]</run>
            <run fontsize='11'>&gt;</run>
            <run fontsize='11'> GDP per capita by country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='World Indicators' name='World Indicators new' />
          </datasources>
          <datasource-dependencies datasource='World Indicators new'>
            <column caption='GDP % of Total' datatype='real' default-format='p0%' name='[Calculation1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='AVG([F: GDP per capita (curr $)]) / TOTAL(AVG([F: GDP per capita (curr $)]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Country / Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
            <column caption='GDP per capita (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[F: GDP per capita (curr $)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run bold='true'>Gross Domestic Product</run>
                  <run> per capita</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[F: GDP per capita (curr $)]' derivation='Avg' name='[avg:F: GDP per capita (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country / Region]' derivation='None' name='[none:Country / Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <sort class='computed' column='[World Indicators new].[none:Country / Region:nk]' direction='DESC' using='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' />
          <filter class='categorical' column='[World Indicators new].[none:Region:nk]'>
            <groupfilter function='level-members' level='[none:Region:nk]' />
          </filter>
          <sort class='computed' column='[World Indicators new].[none:Region:nk]' direction='DESC' using='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' />
          <filter class='categorical' column='[World Indicators new].[yr:Date:ok]'>
            <groupfilter function='member' level='[yr:Date:ok]' member='2010' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[World Indicators new].[yr:Date:ok]</column>
            <column>[World Indicators new].[none:Region:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' scope='cols' value='GDP per capita (curr $)' />
            <format attr='subtitle' class='0' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[World Indicators new].[yr:Date:ok]' value='70' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[World Indicators new].[none:Country / Region:nk]' value='144' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='c&quot;$&quot;#,##0,K;(&quot;$&quot;#,##0,K)' />
          </style-rule>
          <style-rule element='table'>
            <format attr='alternate-text' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='No Data' />
            <format attr='display-alternate-text' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='true' />
            <format attr='omit-on-special' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='false' />
            <format attr='break-on-special' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='false' />
            <format attr='show-null-value-warning' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='line-pattern' id='refline0' value='dotted' />
            <format attr='vertical-align' id='refline0' value='top' />
          </style-rule>
          <style-rule element='title'>
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[World Indicators new].[yr:Date:ok]' value='Year' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' />
              <color column='[World Indicators new].[none:Region:nk]' />
              <tooltip column='[World Indicators new].[usr:Calculation1:qk]' />
            </encodings>
            <reference-line axis-column='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' enable-instant-analytics='false' formula='average' id='refline0' label='Avg &lt;Value&gt;' label-type='custom' probability='95' scope='per-pane' value-column='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' z-order='1' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Country:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[none:Country / Region:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>Region:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[none:Region:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>GDP per capita (curr $):&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[avg:F: GDP per capita (curr $):qk]&gt;&#10;</run>
                <run fontcolor='#787878'>% of world average:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[usr:Calculation1:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='559' />
                <format attr='maxheight' value='559' />
                <format attr='minwidth' value='522' />
                <format attr='maxwidth' value='522' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[World Indicators new].[none:Country / Region:nk]</rows>
        <cols>[World Indicators new].[avg:F: GDP per capita (curr $):qk]</cols>
      </table>
    </worksheet>
    <worksheet name='GDP per capita by region'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>GDP per capita by region&#10;</run>
            <run>Click on a point to filter the map to a specific year.</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='World Indicators' name='World Indicators new' />
          </datasources>
          <datasource-dependencies datasource='World Indicators new'>
            <column caption='GDP per capita (weighted)' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Calculation_1590906174513693]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([F: GDP (curr $)])&#13;&#10;/&#13;&#10;SUM([P: Population (count)])' scope-isolation='false' />
            </column>
            <column datatype='string' name='[Country / Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
            <column aggregation='Avg' caption='GDP (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,,,.00B;(&quot;$&quot;#,##0,,,.00B)' name='[F: GDP (curr $)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run bold='true'>Gross Domestic Product</run>
                  <run> in current US Dollars</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Population (count)' datatype='real' name='[P: Population (count)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[F: GDP (curr $)]' derivation='Avg' name='[avg:F: GDP (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1590906174513693]' derivation='User' name='[usr:Calculation_1590906174513693:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[World Indicators new].[Action (Country Name)]'>
            <groupfilter function='level-members' level='[Country / Region]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[World Indicators new].[Action (Region)]'>
            <groupfilter function='level-members' level='[Region]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[World Indicators new].[Action (Country Name)]</column>
            <column>[World Indicators new].[Action (Region)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='subtitle' class='0' field='[World Indicators new].[usr:Calculation_1590906174513693:qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[World Indicators new].[usr:Calculation_1590906174513693:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[World Indicators new].[yr:Date:ok]' value='70' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='title'>
            <format attr='font-size' value='9' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[World Indicators new].[none:Region:nk]' />
              <lod column='[World Indicators new].[avg:F: GDP (curr $):qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true' fontsize='12'>&lt;[World Indicators new].[none:Region:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>Year:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[yr:Date:ok]&gt;&#10;</run>
                <run fontcolor='#787878'>Average GDP (curr $):&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[avg:F: GDP (curr $):qk]&gt;&#10;</run>
                <run fontcolor='#787878'>GDP per capita (weighted):&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[usr:Calculation_1590906174513693:qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-range-scope' value='multi-mark' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='559' />
                <format attr='maxheight' value='559' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[World Indicators new].[usr:Calculation_1590906174513693:qk]</rows>
        <cols>[World Indicators new].[yr:Date:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='GDP per capita map'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>GDP per capita by country &#10;</run>
            <run>Currently filtered to </run>
            <run fontcolor='#4f6e8d'>&lt;[World Indicators new].[yr:Date:ok]&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='World Indicators' name='World Indicators new' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='World Indicators new'>
            <column caption='GDP % of Total' datatype='real' default-format='p0%' name='[Calculation1]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='AVG([F: GDP per capita (curr $)]) / TOTAL(AVG([F: GDP per capita (curr $)]))' scope-isolation='false'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Country / Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
            <column caption='GDP per capita (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[F: GDP per capita (curr $)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run bold='true'>Gross Domestic Product</run>
                  <run> per capita</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Population (count)' datatype='real' name='[P: Population (count)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='string' name='[Subregion]' role='dimension' type='nominal'>
              <aliases>
                <alias key='%null%' value=' ' />
              </aliases>
            </column>
            <column-instance column='[F: GDP per capita (curr $)]' derivation='Avg' name='[avg:F: GDP per capita (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[P: Population (count)]' derivation='Avg' name='[avg:P: Population (count):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country / Region]' derivation='None' name='[none:Country / Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Subregion]' derivation='None' name='[none:Subregion:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation1]' derivation='User' name='[usr:Calculation1:qk:5]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[World Indicators new].[Country / Region]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[World Indicators new].[Action (YEAR(Date (year)))]'>
            <groupfilter function='level-members' level='[yr:Date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' included-values='in-range'>
            <min>199.0</min>
            <max>104512.0</max>
          </filter>
          <sort class='computed' column='[World Indicators new].[none:Country / Region:nk]' direction='DESC' using='[World Indicators new].[avg:P: Population (count):qk]' />
          <filter class='categorical' column='[World Indicators new].[none:Region:nk]'>
            <groupfilter function='level-members' level='[none:Region:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <sort class='manual' column='[World Indicators new].[none:Region:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;The Americas&quot;</bucket>
              <bucket>&quot;Europe&quot;</bucket>
              <bucket>%null%</bucket>
              <bucket>&quot;Oceania&quot;</bucket>
              <bucket>&quot;Africa&quot;</bucket>
              <bucket>&quot;Middle East&quot;</bucket>
              <bucket>&quot;Asia&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[World Indicators new].[avg:F: GDP per capita (curr $):qk]</column>
            <column>[World Indicators new].[none:Region:nk]</column>
            <column>[World Indicators new].[Action (YEAR(Date (year)))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[World Indicators new].[Longitude (generated)]' field-type='quantitative' max='25515345.338885598' min='-14657847.340487136' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[World Indicators new].[Latitude (generated)]' field-type='quantitative' max='12529094.34785318' min='-6362760.2021120675' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' field-type='quantitative' max='104512.0' max-size='1' min='199.0' min-size='0.139435' type='rangesize' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='title'>
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='size' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='GDP per capita' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='true' />
            <format attr='enabled' id='light_adm0_lbl' value='true' />
            <format attr='enabled' id='um_adm0_bnd' value='false' />
            <format attr='enabled' id='um_adm0_lbl' value='false' />
            <format attr='enabled' id='light_pp2_statebounds' value='true' />
            <format attr='enabled' id='light_pp2_statelabels' value='true' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
            <format attr='map-style' value='tableau-light-gray' />
            <format attr='wrap' value='false' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[World Indicators new].[yr:Date:ok]' value='Year' />
            <format attr='title' field='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' value='GDP per capita (curr $)' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[World Indicators new].[none:Region:nk]' />
              <lod column='[World Indicators new].[none:Subregion:nk]' />
              <lod column='[World Indicators new].[none:Country / Region:nk]' />
              <size column='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' />
              <lod column='[World Indicators new].[usr:Calculation1:qk:1]' />
              <lod column='[World Indicators new].[usr:Calculation1:qk:5]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true' fontsize='12'>&lt;[World Indicators new].[none:Country / Region:nk]&gt;</run>
                <run bold='true'>Æ&#10;</run>
                <run fontcolor='#787878'>Region:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[none:Region:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>Subregion:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[none:Subregion:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>GDP per capita (curr $):&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[avg:F: GDP per capita (curr $):qk]&gt;&#10;</run>
                <run fontcolor='#787878'>GDP % of Subregion average:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[usr:Calculation1:qk:5]&gt;&#10;</run>
                <run fontcolor='#686868'>GDP % of World average:</run>
                <run bold='true'>&#9;&lt;[World Indicators new].[usr:Calculation1:qk:1]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.383216381072998' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='has-halo' value='false' />
                <format attr='mark-transparency' value='188' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[World Indicators new].[Latitude (generated)]</rows>
        <cols>[World Indicators new].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Health spending vs life expectancy'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>&lt;Sheet Name&gt;, &lt;Page Name&gt;</run>
            <run>Æ&#10;</run>
            <run fontcolor='#898989' fontsize='10'>Click the forward button on year to watch the change over time&#10;Hover over mark to see the history of that country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='World Indicators' name='World Indicators new' />
          </datasources>
          <datasource-dependencies datasource='World Indicators new'>
            <column datatype='string' name='[Country / Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
            <column caption='Health exp/cap (curr $)' datatype='real' datatype-customized='true' default-format='c&quot;$&quot;#,##0,,,.0B;(&quot;$&quot;#,##0,,,.0B)' name='[H: Health exp/cap (curr $)]' role='measure' type='quantitative' />
            <column aggregation='Avg' caption='Life exp (years)' datatype='real' default-format='n#,##0;-#,##0' name='[H: Life exp (years)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[H: Health exp/cap (curr $)]' derivation='Avg' name='[avg:H: Health exp/cap (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[H: Life exp (years)]' derivation='Avg' name='[avg:H: Life exp (years):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country / Region]' derivation='None' name='[none:Country / Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='quantitative' column='[World Indicators new].[avg:H: Health exp/cap (curr $):qk]' included-values='non-null' />
          <filter class='quantitative' column='[World Indicators new].[avg:H: Life exp (years):qk]' included-values='non-null' />
          <slices>
            <column>[World Indicators new].[avg:H: Health exp/cap (curr $):qk]</column>
            <column>[World Indicators new].[avg:H: Life exp (years):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[World Indicators new].[avg:H: Health exp/cap (curr $):qk]' scope='cols' value='Health exp/cap (curr $)' />
            <format attr='subtitle' class='0' field='[World Indicators new].[avg:H: Health exp/cap (curr $):qk]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[World Indicators new].[avg:H: Health exp/cap (curr $):qk]' scope='cols' value='true' />
            <format attr='title' class='0' field='[World Indicators new].[avg:H: Life exp (years):qk]' scope='rows' value='Life exp (years)' />
            <format attr='subtitle' class='0' field='[World Indicators new].[avg:H: Life exp (years):qk]' scope='rows' value='' />
            <format attr='auto-subtitle' class='0' field='[World Indicators new].[avg:H: Life exp (years):qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[World Indicators new].[avg:H: Health exp/cap (curr $):qk]' value='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='title'>
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='page-card-title'>
            <format attr='title' value='Year' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[World Indicators new].[none:Country / Region:nk]' />
              <color column='[World Indicators new].[none:Region:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true' fontsize='12'>&lt;[World Indicators new].[none:Country / Region:nk]&gt;</run>
                <run bold='true'>Æ&#10;</run>
                <run fontcolor='#787878'>Region:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[none:Region:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>Year:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[yr:Date:ok]&gt;&#10;</run>
                <run fontcolor='#787878'>Health exp/cap (curr $):&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[avg:H: Health exp/cap (curr $):qk]&gt;&#10;</run>
                <run fontcolor='#787878'>Life Expectancy:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[avg:H: Life exp (years):qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='selection' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[World Indicators new].[avg:H: Life exp (years):qk]</rows>
        <cols>[World Indicators new].[avg:H: Health exp/cap (curr $):qk]</cols>
        <pages>
          <column>[World Indicators new].[yr:Date:ok]</column>
        </pages>
        <page-trail-options enabled='true' end='68' line-color='#00000081' line-stroke-width='2' lines='true' mark-color='#735c3a' mark-type='highlighted' start='28' />
      </table>
    </worksheet>
    <worksheet name='Interest rates'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontsize='12'>Lending and deposit interest rates, GDP per capita and % of world GDP&#10; sorted by GDP per Capita for region and subregion, </run>
            <run fontsize='12'>&lt;</run>
            <run fontsize='12'>[World Indicators new].[yr:Date:ok]</run>
            <run fontsize='12'>&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='World Indicators' name='World Indicators new' />
          </datasources>
          <datasource-dependencies datasource='World Indicators new'>
            <column caption='GDP per capita (weighted)' datatype='real' default-format='c&quot;$&quot;#,##0,.0K;(&quot;$&quot;#,##0,.0K)' name='[Calculation_1590906174513693]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([F: GDP (curr $)])&#13;&#10;/&#13;&#10;SUM([P: Population (count)])' scope-isolation='false' />
            </column>
            <column caption='Rate spread (difference)' datatype='real' name='[Calculation_8570907072742130]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='AVG([F: Lending interest rate (%)])-AVG([F: Deposit interest rate (%)])' scope-isolation='false' />
            </column>
            <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
            <column aggregation='Avg' caption='Deposit interest rate (%)' datatype='real' name='[F: Deposit interest rate (%)]' role='measure' type='quantitative' />
            <column aggregation='Avg' caption='GDP (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,,,.00B;(&quot;$&quot;#,##0,,,.00B)' name='[F: GDP (curr $)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run bold='true'>Gross Domestic Product</run>
                  <run> in current US Dollars</run>
                </formatted-text>
              </desc>
            </column>
            <column aggregation='Avg' caption='Lending interest rate (%)' datatype='real' name='[F: Lending interest rate (%)]' role='measure' type='quantitative' />
            <column caption='Population (count)' datatype='real' name='[P: Population (count)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column datatype='string' name='[Subregion]' role='dimension' type='nominal'>
              <aliases>
                <alias key='%null%' value=' ' />
              </aliases>
            </column>
            <column-instance column='[F: Deposit interest rate (%)]' derivation='Avg' name='[avg:F: Deposit interest rate (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[F: Lending interest rate (%)]' derivation='Avg' name='[avg:F: Lending interest rate (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Subregion]' derivation='None' name='[none:Subregion:nk]' pivot='key' type='nominal' />
            <column-instance column='[F: GDP (curr $)]' derivation='Sum' name='[pcto:sum:F: GDP (curr $):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' type='PctTotal' />
            </column-instance>
            <column-instance column='[Calculation_1590906174513693]' derivation='User' name='[usr:Calculation_1590906174513693:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_8570907072742130]' derivation='User' name='[usr:Calculation_8570907072742130:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[World Indicators new].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[avg:F: Lending interest rate (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[avg:F: Deposit interest rate (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[usr:Calculation_8570907072742130:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[usr:Calculation_1590906174513693:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[World Indicators new].[pcto:sum:F: GDP (curr $):qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[World Indicators new].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[World Indicators new].[avg:F: Lending interest rate (\%):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[avg:F: Deposit interest rate (\%):qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[usr:Calculation_8570907072742130:qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[usr:Calculation_1590906174513693:qk]&quot;</bucket>
              <bucket>&quot;[World Indicators new].[pcto:sum:F: GDP (curr $):qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='computed' column='[World Indicators new].[none:Region:nk]' direction='DESC' using='[World Indicators new].[usr:Calculation_1590906174513693:qk]' />
          <sort class='computed' column='[World Indicators new].[none:Subregion:nk]' direction='DESC' using='[World Indicators new].[usr:Calculation_1590906174513693:qk]' />
          <filter class='categorical' column='[World Indicators new].[yr:Date:ok]'>
            <groupfilter function='member' level='[yr:Date:ok]' member='2010' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[World Indicators new].[:Measure Names]</column>
            <column>[World Indicators new].[yr:Date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[World Indicators new].[:Measure Names]' value='117' />
            <format attr='height' field='[World Indicators new].[none:Subregion:nk]' value='20' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[World Indicators new].[:Measure Names]' value='48' />
            <format attr='width' field='[World Indicators new].[none:Region:nk]' value='84' />
            <format attr='width' field='[World Indicators new].[none:Subregion:nk]' value='108' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' value='true' />
            <format attr='break-on-special' value='true' />
            <format attr='show-null-value-warning' value='false' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='title'>
            <format attr='font-size' value='9' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[World Indicators new].[yr:Date:ok]' value='Year' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[World Indicators new].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows total='true'>([World Indicators new].[none:Region:nk] / [World Indicators new].[none:Subregion:nk])</rows>
        <cols>[World Indicators new].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Share of World GDP'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;[World Indicators new].[yr:Date:ok]&gt; Country &lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='World Indicators' name='World Indicators new' />
          </datasources>
          <datasource-dependencies datasource='World Indicators new'>
            <column datatype='string' name='[Country / Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column caption='Date (year)' datatype='datetime' name='[Date]' role='dimension' type='ordinal' />
            <column aggregation='Avg' caption='GDP (curr $)' datatype='real' default-format='c&quot;$&quot;#,##0,,,.00B;(&quot;$&quot;#,##0,,,.00B)' name='[F: GDP (curr $)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run bold='true'>Gross Domestic Product</run>
                  <run> in current US Dollars</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='string' name='[Region]' role='dimension' type='nominal' />
            <column-instance column='[F: GDP (curr $)]' derivation='Avg' name='[avg:F: GDP (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country / Region]' derivation='None' name='[none:Country / Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[F: GDP (curr $)]' derivation='Sum' name='[pcto:sum:F: GDP (curr $):qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[F: GDP (curr $)]' derivation='Sum' name='[sum:F: GDP (curr $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <sort class='computed' column='[World Indicators new].[none:Region:nk]' direction='DESC' using='[World Indicators new].[avg:F: GDP (curr $):qk]' />
          <filter class='quantitative' column='[World Indicators new].[sum:F: GDP (curr $):qk]' included-values='non-null' />
          <filter class='categorical' column='[World Indicators new].[yr:Date:ok]'>
            <groupfilter function='member' level='[yr:Date:ok]' member='2010' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[World Indicators new].[yr:Date:ok]</column>
            <column>[World Indicators new].[sum:F: GDP (curr $):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width-header' value='10' />
            <format attr='border-style' data-class='subtotal' value='none' />
            <format attr='band-color' scope='rows' value='#00000000' />
            <format attr='height-header' value='10' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' data-class='subtotal' value='none' />
            <format attr='band-color' scope='rows' value='#00000000' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='rows' value='0' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-pattern' scope='rows' value='none' />
            <format attr='line-pattern' scope='cols' value='none' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[World Indicators new].[yr:Date:ok]' value='Year' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[World Indicators new].[sum:F: GDP (curr $):qk]' />
              <color column='[World Indicators new].[none:Region:nk]' />
              <text column='[World Indicators new].[none:Country / Region:nk]' />
              <text column='[World Indicators new].[pcto:sum:F: GDP (curr $):qk:1]' />
              <text column='[World Indicators new].[sum:F: GDP (curr $):qk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run bold='true' fontsize='11'>&lt;[World Indicators new].[none:Country / Region:nk]&gt;</run>
                <run bold='true'>Æ&#10;</run>
                <run fontcolor='#787878'>Region:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[none:Region:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>% of World GDP:&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[pcto:sum:F: GDP (curr $):qk:1]&gt;&#10;</run>
                <run fontcolor='#787878'>GDP (US $&apos;s):&#9;</run>
                <run bold='true'>&lt;[World Indicators new].[sum:F: GDP (curr $):qk]&gt;</run>
              </formatted-text>
            </customized-tooltip>
            <customized-label>
              <formatted-text>
                <run bold='true' fontalignment='0' fontcolor='#000000' fontsize='10'>&lt;[World Indicators new].[none:Country / Region:nk]&gt;</run>
                <run fontalignment='0' fontcolor='#000000'>Æ&#10;</run>
                <run fontalignment='0' fontcolor='#353535'>&lt;[World Indicators new].[pcto:sum:F: GDP (curr $):qk:1]&gt;&#10;&lt;[World Indicators new].[sum:F: GDP (curr $):qk]&gt;</run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#f0f0f0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='GDP per Capita Dashboard'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='0'>GDP per Capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <datasources>
        <datasource caption='World Indicators' name='World Indicators new' />
      </datasources>
      <datasource-dependencies datasource='World Indicators new'>
        <column datatype='string' name='[Region]' role='dimension' type='nominal' />
        <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='6' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='93133' id='11' param='vert' type='layout-flow' w='84000' x='0' y='6867'>
            <zone h='92431' id='2' type='layout-basic' w='84000' x='0' y='6867'>
              <zone h='35986' id='12' name='GDP per capita by region' w='84000' x='0' y='6867' />
              <zone h='56445' id='14' name='GDP per capita map' w='84000' x='0' y='42853' />
            </zone>
          </zone>
          <zone fixed-size='160' h='93133' id='15' is-fixed='true' param='vert' type='layout-flow' w='16000' x='84000' y='6867'>
            <zone h='27193' id='19' name='GDP per capita map' param='[World Indicators new].[none:Region:nk]' type='filter' w='16000' x='84000' y='6867' />
            <zone h='25088' id='20' name='GDP per capita map' pane-specification-id='0' param='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' type='size' w='16000' x='84000' y='34060' />
          </zone>
          <zone h='6867' id='10' type='title' w='100000' x='0' y='0' />
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='GDP per capita'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[World Indicators new].[none:Region:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[World Indicators new].[yr:Date:ok]' show-all='false' type='filter' />
            <card param='[World Indicators new].[none:Region:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[World Bank Indicators (Excel)].[:Measure Names]</field>
            <field>[World Bank Indicators (Excel)].[Region (group)]</field>
            <field>[World Bank Indicators (Excel)].[none:&apos;Regions and subregions$&apos;_Subregion:nk]</field>
            <field>[World Bank Indicators (Excel)].[none:Country Name:nk]</field>
            <field>[World Indicators new].[none:Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='GDP per Capita Dashboard'>
      <viewpoints>
        <viewpoint name='GDP per capita by region'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='GDP per capita map'>
          <zoom type='entire-view' />
          <floating-toolbar-visibility value='2' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
    <window class='worksheet' name='Health spending vs life expectancy'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[World Indicators new].[none:Region:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='78'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>2009</bucket>
          </multibucket>
        </current-page>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[World Bank Indicators (Excel)].[none:&apos;Regions and subregions$&apos;_Region:nk]</field>
            <field>[World Bank Indicators (Excel)].[none:Country Name:nk]</field>
            <field>[World Bank Indicators (Excel)].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Country ranks'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='72'>
            <card type='title' />
            <card mode='slider' param='[World Indicators new].[yr:Date:ok]' show-all='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore Sales (Excel)].[none:Order Date:qk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Order ID:ok]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Product Name:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Product Sub-Category:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Region:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[qr:Order Date:ok]</field>
            <field>[Sample - Superstore Sales (Excel)].[yr:Order Date:ok]</field>
            <field>[World Bank Indicators (Excel)].[none:&apos;Regions and subregions$&apos;_Region:nk]</field>
            <field>[World Indicators new].[none:Country / Region:nk]</field>
            <field>[World Indicators new].[none:F: GDP (curr $):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Interest rates'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='72'>
            <card size='793' type='title' />
            <card mode='slider' param='[World Indicators new].[yr:Date:ok]' show-all='false' size='261' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[Sample - Superstore Sales (Excel)].[none:Order Date:qk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Order ID:ok]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Product Name:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Product Sub-Category:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Region:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[none:Ship Mode:nk]</field>
            <field>[Sample - Superstore Sales (Excel)].[qr:Order Date:ok]</field>
            <field>[Sample - Superstore Sales (Excel)].[yr:Order Date:ok]</field>
            <field>[World Bank Indicators (Excel)].[none:&apos;Regions and subregions$&apos;_Region:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Share of World GDP'>
      <cards>
        <edge name='left'>
          <strip size='180'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[World Indicators new].[none:Region:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='54'>
            <card type='title' />
            <card mode='slider' param='[World Indicators new].[yr:Date:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[World Bank Indicators (Excel)].[none:&apos;Regions and subregions$&apos;_Region:nk]</field>
            <field>[World Bank Indicators (Excel)].[none:&apos;Regions and subregions$&apos;_Subregion:nk]</field>
            <field>[World Bank Indicators (Excel)].[none:Country Name:nk]</field>
            <field>[World Bank Indicators (Excel)].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' hidden='true' name='GDP per capita by region'>
      <cards>
        <edge name='left'>
          <strip size='204'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[World Indicators new].[none:Region:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='46'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
    </window>
    <window class='worksheet' hidden='true' name='GDP per capita map'>
      <cards>
        <edge name='left'>
          <strip size='150'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' type='size' />
            <card pane-specification-id='0' param='[World Indicators new].[none:Region:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='76'>
            <card param='[World Indicators new].[avg:F: GDP per capita (curr $):qk]' show-null-ctrls='false' type='filter' />
            <card mode='checkdropdown' param='[World Indicators new].[none:Region:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Country ranks' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='GDP per Capita Dashboard' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nOy9d5Rdx3kn+FXVzfelzhmNBhqRABNIiqQpEaJI0XKQPJLD2t5j2Z71eEa7
      49mZ9a43zOzqeM+ZM7PHOzs79tirsT22R7IlmbIiZQaRBJgTQILIoXPufq+7X7q5wv5R792+
      /brRjSSCIPt3Dhr33Vu3bt2qr75cdZEQArawhWsFvtkN2MKtjS0C2sJ1YYuAtnBdUJI/BI+O
      v3r0nTNDqdbez3zm8cLFN3/0+imsaAcPPXj/XftKMxef+P7zHCv9u247/PH7LY1cw/N45L30
      /LPnRqazHTt+4fM/qaLLFaT/75f/l4d+7fe2acWRAv3YnXuv4VlbeB+wioB++Nf/8fmzlU9/
      8v750YuzRbcwdn4s7z16X+8PvvofZ4r/8GNt5XfPjH/uc4ffevZv56viNz73EAAEbml4dAZh
      rtvNA31dCInlhZnJ+eW+gcEmSx0euogUzfWi3fv2ahgEZ0/8+f9zfE557KFDSEsrAIuzE1P5
      Uk//jtasPXz+JCNmGLLB3buiymL3rgMdWe25b/ztxbCtuSmzs6d1ZHgoFNrg4A5N2WKcHxQk
      CMhf+OGRC7/3B/93r8nOd3UYIgCA1r6dn/7MZwc7rD/+7kt3fuFOM9P+yU89xuYuDJfL8qbi
      9Pl/+6//pH/3QGFm+rFf/m9vzy7/4V9+N5dL5cv0937vd7/6lX837Vn777h/z/69ABBVpp57
      c/r3//Dfd6VUefsPnvgvYwV3Kh/9m3/3b/76T/5t0RhQaYV03PbFx/Y+/czTO+57ZGhsZsqZ
      f/nY9lbc89d//fVKean7zsf/+a9/9rKcawvvLxIEFLhVLdOW1v2l0b/5y68YOx8+3FW7YliW
      oJEQsDB6/Eu/9dvZtp7f/qf3x/elW3f83v/+r8Ze/u5fvPb6Eh43mjp6upuL82+dvDQJSPmV
      3/4Xn7yjX5YUXtW1Wtrq1AOC33HofnZuZHbi6OhcFQB+6bf+xaHu4J996f80//Gv7e78S1Cz
      Dxzal6EDv/mFx7xy/u47DwwPXRg5e84XnzW3KOiDgQQBpTsGjeWnXz7x2Yfv+tyjDzwzWjtN
      A/fI80e7Bm/TMbRuu/1f/ssvZQxT09SVG4UQnJfKFVVRscA7b7vn5x+756d++mdbm9LHvo9T
      trXysKbuLjr90rtDh+/YMTM9bQSzf/jVJ3/uZz6lK8jzAgDgQrjVMkWEoBqBIISiMAx8/+//
      9i9OLtl7Wpsvzi4y1iB7t3DTkBgHbP7mP/6tP/rKXz399a+omn74c78KzqkTL3z7v3vrmc7+
      vf/oVx6jk29homYyGX11FeX8pf/hS/8Ea+kv/pN/1i1m/v3/91f/07NP9B546F996ecbHoa1
      3Bd/7Qt/+md/8PWI27nO3/nt/8oU1Sd/8EMh1OXlJQD48//rfwUQ9z7+DzptTd7SP7j763/0
      tf9jeuKT+9umXnslb+ghSrl+lEqpsIUPAFCDJzr03arrq5qRss3Qdx0vQJik02mFYBoFjhtm
      sumk9Ji/9Obv/4en/rff/52MbtmWgYTwPcf1Q920LUOtlMuGndaUFXtNCOG7VS+ITCtlGppb
      LfsRUxVCVOMPfu83Pv6b//rO/qZsJo0xqpSWdTurEqiUSwKracsolyuIKMB5KpMheEuGfSDQ
      KAk0w2o2akJHN23dtFeKqno228B9QDVSAwN9zU3NhvyNkGGl6hVAJptrKI8QMu10XKuVysQS
      rqd/Z3trc1MuLX+ms031SmoHuaamq329Lfy40ciBtrCFq8KWQ2UL14UtAtrCdWGLgLZwXVgh
      oFJ+6snvffvomyfzkxe/9cS3jr7+bsiiF5/63ne+9+RkvnQ9z6De8jsnL3lOJaR81YWg8M3v
      PH/lKpi7PHv64uT1tGQLNxzky1/+MgAArf7xH/3pHfc/FHkeK00Mly2zfHGojE+9/urdBwe/
      88I7D9570C/NP//8kfMjU53dPWNnj7/+7rmO9tY3Xnv5wvBkz7Z+BfilU8dePXampTVz5Oln
      SlRD1dmjr74xs+hgf2ks7730nf90ag56MuzZF142ch1NaRPCpW9884dVP2hOq5emly1WGsl7
      bU3p8XPH3zh+MsLm+Jm3Tw3PdbXnXn/x+VMXxv3KYokZmj//wktvpVo6xs68fezd90Kcam/O
      3ORe/AijzoGcfNS087b+1ue/9/18GOVaOg7ddSA/Px+U88+8dOyeu+/EAF5p/tJMNRXOfuvb
      3/3zv3ri5FtHv/3DI0dfenP7rj06QZX88PePnNw10EVDmp+f+Jv/8o2hi2cCo3Xs+HOTRWd0
      YsG2rMHdu3jkT1w8+Y3vPicfa2bb+iznuy+ffvW5Z1949ikwUgAweubtRZai86e//oMjrzz9
      d9/9+2effv61l195lUM0NTL89W8/O9DX/MT3nn7z1SO5to4nf/D39GZ13hZWCCjd0xqMPfHU
      S5phEoTOn3jtmz948a47D1itvf/0n//uox/bL0sV8zOXxuda2tpSKcNq6vmJe/aZ2bYd/V0Y
      gaKazF06ffbiyTdevDhbJtz3Ij41eqlQpW0tOYxwa3PT0Nlzzz/7tAuq71ZkhW4xf2Zosr2j
      99DO9LsFdXdHSp4fGNzb1tJkakr7jgMP3rlH8HDX3tuacxlENFthp89esNMZrOo7d+1KKXjL
      D3ETseIHoqE3OTlj5VozupieK2Sb21ubUvNz822dXQQBACxNnPz6j87+zOMP93Z3VpcX8stO
      d093qVTu6GzHAACitLiwWAm7O1vmZudVTRt795V5o//BO/e2Z41Cyc+aeHq+2NaWLixVdV3r
      7uwAHk5OzlJQtm1r+f5f/Of07Z9+9J5BACgvLSCzKW0q+Zmpks87s/An/+lvSqXSz//W7/Q1
      py2VzS4Uu/v6KksLuZa2pcXlto62LVvgZuEqHIk0cJartK0le4Xlq8VFrqUyVqPzet26p6cK
      XT0dGK0ToBCCzU5NMsXq6WzfCmB80FAnIMFePfIcNVts4Te3ZVB250C77RbGz+bhnn39V1Mh
      e/vtE/feewgAIre46OHOlky5MCPs9qxZC5t4S5PPvzPVkVV9zz2wa4fa2pNanZg4Oz3VltVe
      O7/4iXv2Xdkzo8m5xb6ezitvpRDBsePnuZc3DNPuu2OwM3Xl924hidqgRksjc6z18/ff/cKT
      33X8ZaOKLpyY72nShyaLCsZ37ul588XnC45oyyoLRbd391137uo+c/zlsZL204/c//bRv19w
      ob2ze3F+Vk1llvJFd+n7ToSaLHw6r/36Lz367ivPOm13m86UK8zHP3347LFXKd4+Op3HkeNM
      nTf2fyKavlhmeovFlEznA/fc8aMnv33P/fefeOd8dWmu1eLTC+X7P/UZ258++sYZTlRNs/b1
      505cmM/qjs/0wdvv77fdv/vO0488eHB6fnHbnkO3DbSdeuuVKd/4zMP3vv78U3rXrvFzxzUt
      ta2va3RysqOrfzGf7+3Jzc6WhodO33f7Hn927NJ7s/sO3r2thRx98wL3Szrh+VJ4z323v/3a
      sV27ekZm/IcPP9hkXwkr/cihpjwQKxeW5qenZxilBNjwhTN2x860ocxMjJQcX4hobLqYQd7o
      TGHHzv7hoRHul46dHh65eJEJKBaXOztbzxx/G9Jthfk5t1ItVYKBdrMYovbOdiJQS0tra7O1
      UOJsed4TqKW1tXv7rqCyyBlramlub9JOD82lbXup4t1z1x0Ek5a2zo7WXFf/Hmdx7J0TZ42U
      rWJMA8duaadMrc4OvfLWidnJS9MLy53t2cnpgm6l2zs7lmbHO7q7JiZmIr/87pkLQ5cuCUB9
      /T0njr9bdKKc4r36xnHQTH9pWqS7u3taisWor6+vI4WHL5wx2nemTQXrOTp7vCDs82cv2Snr
      zDvHi4szQ+PTvXtu9/JTJT+6uUP1wcSKDrQ0P5Wv8vaMSoFoZjo/NZpt7cCqGjpuZ1dnqTBT
      cERrRld1w/Fpe3N6fGQUNLO3t+elJ7+udt9x6MDg7MRItqM3dBwFg2WoAVKXZme37doNQXls
      djmr8YCkt3W1epWlkKTdUgFzkc5Z0wvVtBIyvUlDUUtLG8aovDRfdCLdSkPk6goqVNmO/h4W
      VCo+jyIGNGDU9xk5+ebzXfs+ftf+HRqB6fFRLZ1bzBe27xzUCYyPjoCW6u/rKsyMu5QceeGZ
      Bx9+fKArNzQ6s3P3zpmRi3ZbF/UowSxlKCGxClOjzT07mtPsP//hV3/6N35Tc/PFgLSm8Nxi
      OW3bVraVOUt6tsXSttLYGrEVjd/CdWG9KcX8xTJrabLXuXR5VKtVzvnm5bbw4cK6PFlwftVs
      iXOeyWyFFD5yWE1AQoxeOOlCamDH9pvTnC3calhNQGz50tCkqhslqj94oPcmNWkLtxJWxQAo
      VQxTDyjtbkvfrAZt4dbCKg40OzFcjXAum0qZW06zLWwEznjghZ4bruJAfTt2eqXlarXiuP7N
      atkWPshglDkVb3G+tDCz7LmB0eAZGzp/kWPQdZ2QrfD2FlZAIxZ4oe8GNGKaoVopQzdVhBBC
      aBUB7dy79+SZoaXCgnvmXOcn7nv7xe+NFcwH7xk4e/rcjn17z5+90Naz+8FDe4488wMfUrYS
      dG7bUaiIB+7euxUj//BBCFGnm5AxrhuqnTE1Q0MIUCJpYhWnQcCIlunryC0tLjsB7entJSCa
      u3c0W6gwP7v9wD3l/DRABGquzaKLhcXnXn7vzoO7ozDc8iJ+aCCECIOosuwUZovL+TKjPJ2z
      2rubsi0pw9IxRmh1ys0qDpQvlFMGG50LHnzw4YyhXJifD6vOyPAFrpgC65MX3jNTrUuLDg9L
      8y7O5HJ3PXDwtTfffeTBuwghjuO8v2+6hRsJxjgNaeCFvhcihHRDzTanVE2B1fxmLVbFwoSg
      b7/0fECaBg8c7MqZjLqLy1Frs+0HkWEaoe8RTQcuQDAmkIIRVhQaRaqmIYByubzlib6FwDmn
      IYsiGgU0CinngihYN1TD0hWVAGxCNzFWcSDEnHyhWA1Kdkd/V84kitXeBgBgWQoAGKYFAEAA
      QIm3xtA07Ya90xZ+nOBcMMqisEYxjDFCiKISVVfstElULJXiq612tScaaa0d3QOd/Xt2tN+w
      hm/hJkFqwTSSRBNRyjFGkmIM21ZVgjCCK+Y0ssKA+cWwWAyW8t78gjef9xYagqnYNI1LJ98y
      UrkdnVvy6JaBqAE44ytsJmIYI6IQVVNSWUtRFUyulMcIIVzqlMPSUrCY9xby3rykmID5JjFt
      NdVqtreZHYfaP9bAgXDglhhSMdpKErrJkAQhhBBcyL9cCME454JzwTkXqw9qzAQBJljVFDNt
      ZFQFE4w204IBgAteDJZn3KkFdy5mLUwwgxi2mmoz2tvMjp2ZXW1mR1bP6UTXsB7XuYqAlvKz
      Zkv/I7d3hr4b8bSKt9yJ7wc455wJxhiNGIsYpYxRLriAhIRBCCGMMEYYY4QRIRirGGGESe1M
      jbcgdCUUAwBO5OS9ufHK2Gh5aLwyygRLqeluu6fd7NyT299mdqS1jEEMFWsb17aKgEw7E05c
      OHum0LN9sO3q9aktbAohBGecMc4oo5JWIsa5kPShKERRiamrRMEY15lHnSCuQcNNIuLRol+Y
      rk6MlodHK8OloGgqZm9q247M4CO9j7cYrZZiX8Mj1k9pFUJcbV1bZnwDpNxhjDPKJaFQyhhl
      khKIQhSVKCpRFEKUOgu5oZOWC14Ki/Pu7Fh5ZLQ8POtOY4TbzPaB9M6BzM4uuzetpgm+3izv
      hnwg5/t/+60Fh9/36M/evr31Oqv+CEIIwSgPgyjwIhpRIUAqJZK16JamKARjhNb4c2/Ao0Fw
      zhzqFIPlicroaGV4vDIasdBW09vTA4faP7YtvT2nNemKjmCjR0uGUtPAQOphIDUxLgTndZWM
      1342EmB7/y48PRZFDACmR84Mzfr7drRdGpnef3D/pdOnuwYP9LVnR869V+Z2s8mbO3ump/O7
      d23/iEs7zrkMGwVexDlXVEU31VTWxBhfueGzKYQQIQ985gfMdyOnFJbKYbEUlsq1g6JH3YhT
      nei99rbtmZ0PdR1uNdpTalo2QNppjMnRF0xyRy4454wLxjnjnHPg60kkBBArWvIAI0QwVsjq
      YOroufdGpgrt2YyhKgAwMTlMYZuRat7ZufTusbezPYMXTp7se/T+sdnljJo/vVxyTw5/4pHD
      H03qkdpMGNDAC8OAIgS6oaZzlqop+JpyGbjgEY8iHoUs8JlXDkvlsFQKi7W/QakSlZlgACBA
      aFjLaNmslsto2U6re3d2X1rN2kpKwWpKySBBGOeMi8DjruMwzhkTCcoQCBDGiGBMMCIYqwo2
      sIIxInVJiqQ6vqKAXVYDW0VA6dbu7pYAqySX0gCgo6fnxBvD8wMts7PBbTvapwIQggMACAAQ
      lPJ0WiuV3ayOgyBgjF1Dr91y4FzQiAZ+FHohY1xRiW5qdsZUVLK2i4UQVNCIR5RHEY8iFrrU
      cajjUseNHKf2t+pSx4kcn3lSbjBOMSJpLSPpI61m2jNdaTWbUjMaMlSkq0jDoMRsg3EBAkQE
      LBIMIEKhJAtCEMZYVWqEEnMOdMWW2pVgFQE1t3U65Xewgn0GAGAQRW1uY6V5xiNqDtDp8wN7
      9yzMl/u7cwVPub2rr613x9jIqNbbout6uf71jA8ZJKcRAqKQhkFEI8YZ1wzVzlqqpmCMqKAe
      dQI/ABABC+bduXlvtuAtUE4jHoU8CFkY8TDkIeXUIKalWCaxTcUyFTulZNuNbltNWYqlIZMg
      lYCKQdGwgQSqO4CAy6NQYIwBI44xwqAoWMeKpBWMEMYIIcA3WhPfFKutMOY+8/QLmCCmNR/+
      xMeMq/kozofGCqvpj5xTykM/DPyIM66qim5qmqEwRD3mLfmFWXdmzp2Zc2aWgsWQhwoi7WZX
      h9nVaXW3m50pNWsQSwGVc1FjFaymaggBNTUVoM4qaqKEYEQIJrjm2cG4JkpudpdshAZPNDCn
      NOOyj33q/quinlsXtRgAF1Q6ZiImeYzgAjAIlXMjKrLFeX92tjgz586Uw5IX+Ro2W7SOVr1j
      l3WoOdeWVrMmSQEASMslAD+ACFOCeUwTmkIkoWAk+cgV+Yg/+GhYF8azXdvo7ITj3siNBGpx
      GqiJXmknblT+sj+u6em1Cb/SEs4FZZwxTiMWRYwxxpgQQkQiDCEoskIhnCvQ2UI4Vw2rAQvS
      aq5V62jRO+/KPNykt2a1nElMXFcskgyjZqfcUCXjA44GDqSms207e5s96+rWNW8MIWBqvgho
      lf+jLjnXc2Ouc3T1D5V/6m4MUfNvAEYgYwKARCiCUrg0607N+zOFYLbKSpHwcnpzj93bn+1/
      wH6wSW/NqDmNaBjBDXf0fTjQwIHo3ORo0cCtu65is6ZNgRC0NaeFAEAguOCcc8o554xxzgRn
      nHMR0wommBCMCSIEY0Lk8aqwooD6gVh9UC+TeB8AQAgpCiEK4oT5wpkPZuf86WlnKu/NV6OK
      RvRuu7cn23codXu72dFitGmbRX+2kERDKENwziPKNe3yHzO9DK5HiRZCcCY455wLaZiyuoXK
      GOdcoDoDiM1QhOscbcUwBYE4By5AcGAhD13mFIOlpWhxxpmcc2dKQZEK2mX19KT6uu3eLqu7
      1Wy3ldQWuVwPVnMgWnn35MzePX0YY1W5lm/qXg4CRIM8avxNBCYICwSAV+RbrSSX6QxMMOky
      cWnVqflRqg51HFp1I8ejXsiDgAUhC0IeYoRtJWUQoyfV12P33dv+QJvZkdObMPpIGAfvGxoz
      ErlfOP7O4q79d3S13LBtA0MW/uX5r3jUlUIGAOoH8p88qMdgVh8DQMhDLnjAfMojg5i2mrIU
      u/7Xzmq5LrvHVmxLsQ3FNIlpKpahmApWNg76bOGGoEEHiuZnJoTWNLfsdLWkzr37ysXp8NFH
      H3z3zdfvvPvON994u2vHwf07O0+8+XKVp3Im7egdmJhZvvv23RsPlIKVwz2PhiysWycIwcoB
      rDkjPejxeS54Sk2ZiqUTY4t/fNCwmoCI0ZRNTy0F7S1pAAiph5WUCF3P85bmJlp33DY1fH7/
      zpZlBzLa4shw4bWTk7/6yz8HDZrrGmCEd+eubL/VLdxqWD2hBY+E2tJkyg2miGHiUr5A9Vxa
      VzXdc8qIaJxjLmhEhaJZ9x7YfvbiZBRFjuNsLSz8iEAkwCltyAdyp+aWu1q1V155+/M//Yn+
      7v6y39TXZGX33p7ONZXKp3fec/viYuX2vQOLgbo7raSa2wtzc6qmaZr2YY2FfRSRtMw554yK
      iApGOaWCUkEpp1QwJihFGK8244UII+mDRqqqXJV9+6GJhX1EUPOnMS44h1qmPhOU1ehDEgqj
      IARSFKwoSFFWDkj9AK/OaJwZvzhb5ncd3LvuJwe28MGEEKJOAXzNAVs5Zhw4E4kCgBAiBGEM
      uJavj4iCFEWxrJhcQEb5L49VBDQxs2zppBKyrL61IfJNwGWIgAvOLk8iHDiPKQAQQpgARnK5
      BiIYEYJUrXa1RiU1olnbgOtdmYppdTxfnS9V9x441Ne+JY+uESssQchhFqsogF2WSQBAkh80
      HGBVXWEVmCSJBtYM/PvmXl9FQDt29JcvTCFEmrI3Mpj6gUX9QzMJzyXUvJtxQrkQHLgQnIPg
      9eQuOfyiTh+87irnMvULhKgzAwwII4waSUHRVtEHqa3vAoAGUvjgh1lWEdCl8YXDhx8Wlcnj
      F2fuP9h3o54hOHfGx0Q957XmJoyx0kerzq8udvl+3LSH66sMAGq0ImCFaCC55Crxd+VMjQ5k
      fheuJZcTghRJEKh+snZcYwmNr3YLkEIMUZtCtTkUz6jVP2tXV+/OETmvvPwScD/Xc0d8cnFm
      9O33Ltxxz91DZ850Dx7c2dt67sSbZZ5qNllbT//EVP7g/sFN+gYhe1v/SlZOvZnJNtfTL9Zc
      urovMYh1DuscHsWsPs7W2XhQ0Wr6XbdwnTATTa11sQAAvtKO1dFAEd8e37xSMHEp8Yy4ckgc
      iETNiQKrR3qFINb8rIWOIObBfNW8AtljciYnYgT186hhi7u2tpbFcjg1u7Tzzlx8slhc8qig
      y1Op3sGRc2d29j44t+Sn1fKF8eXX3xv93Od+6gpmlghLM0Kq/fJE7f/EvId6g6Fh+qL4z7Wm
      B60a3cSQJYdEJEaxkRrE6p/1WuJicZNrvZ7gipdhoo30mHjHVcXQ6gI18l9Vst5L8bPrQ17L
      WKin8SVnDqpPqsafqH4y0XuXaVv9bVcR0Pyyv2fP7gN7uk7OLPY11zYa14xUW2ruzPBsS38G
      EAZAQn4KASs7+1onZgoHd3bBJkCK3Sy4FGGrp1o8rgBrBg9WjWhj+zcFSvyfkE1JMo1pdGXU
      G0ZiNR2v9Gby5ArWJh0kXmtNouV6KXXJ7b7qNcb/iSRHS1a7mpEJAAC+6locmV5xEorVBeIL
      QiQqSuRvr1S96tIqAurvTB977yQw+NjDD8cn29razg1PPvDx+0fPnd53+20L86XdA50FXz00
      oDR19k5PTonNRlYIsbxYFA2xjnXuQev82Ew6bnw5bsIqIZkc56RkXTse8v/1H7JWq0Gr/6xu
      4WUYzprKG7hT/DPmPmjN6cuVQQ3VxbHsNRwzOXlWsbpYZq2afcmLqxPK5Mqvq8vdDIIgCALP
      80zTXLeAECIM/HogfR09R+6WFRdffTNQxpSVq40znDFKyGW9VvHVuM8g0W+MMaKQ5JAk/8lW
      Xa4r5L1xnbD6aOWNVkm0dd93lQCUV/Hl3XcN9970qzfse2EbhDJk4A1ffrOYjcMgnPOP2r0b
      5F9/0Np8w9JrdL3h6whiOT83s7DkV4tTc3ng0dj4JOVibmq84oWb3QuR74yOTUQ0mhwfD5lY
      nJ9eKruC08Li8qb3Vpbzk7N5GrjjE9MCYGZy3A1ofnYqv1zZ9N7yUn5qNh8FzvjkjBBscnzc
      j+jc1MRyxdv0Xr9aHJuYjqJgYnySCTE7NeH4keAsX1jc9F4auCOj4xFj0xPjfsQL+YWA8tnJ
      0am5wqb3epXi2OQMpeHE+ATlYm56ouKFleX8XKF4Bc91as8dH/NprZ/npseHhoa9kG18b+Q7
      Y2MTP7YvFgp25vSZk8eOg2WlVKGZJmVYS2cKi1UF4V/4B5/Z+O785NC586dnlnzTTBPDqJQq
      mPPtrfDyKPvd/+YXNryVXzxz5tR7xxQzjYmayqQLZU8h9mBv5q0T5//hF39l4+deOHvyxLET
      etpSiSC6FQRAUi0daunSsv4rnz288b2Tw+fOnDxVikTKNISqOx7TNOvQNu1vXh77n7/0qxvf
      W5gePn/ubL7KBSYCSEc0UW67fer0qUc/+3M7ejfZr3Ji6OyZk6dComGCgeiuG2EMzF1u7dv7
      6Cfu2/je/OTQhfNn8y4AxlyQwPUIFo996ie+83dP/sIXfz2zYUQrPzVy4dzJH1uCH8IZxZsP
      1SDgXVl9ZGK2f1vP9Nio0dwTeKVN7861tp0+dSmti47evsLsFDKbMHX23nGvbWwapMNNKTxW
      oDxwt3U3T4xN5Dq2+U6RuPPMaNn0uS02nijSwA+3deTGRyY6evtKVe+Oe+5DbnHTpf/NTZlz
      I7M6oj29XbOjY+nWHqc4ffTNczYJos1ypZpa20+fPJezcVPPNmd2Amv6Un7pvofuf/3oUbr5
      c9Pnx+ZVQbv6ugtjo2ZTZ7W0WA3o/OhQsNm9Te0dJ987lzOhua/fmRmnRhOiTlCab999T3qz
      eGiuufn02eEfFwEJFh45+uquXYP7trePV9THDt9/9tzIg4cfQYtD2wYPbHr7hXdfhVzvzt37
      p4Yu3Hn/Q1m+nO3ZnbGslqbsZg+mLx95cfuuXbt2D14cXfz4Jx8uT53fvnPn8y+/NzjQvelz
      jz733I7Bwf27t5+fqj7y2OGpoQv7dna/+OKrbd29m/bU8VePNPXu2LV719DQxKYEOlcAACAA
      SURBVIOPfiqYHxrYe9enH3+svaV5U5Pk0onXaLZn2/ZdpZFzux54WBDrtn27FqYnW3v6N33u
      sVeONPfuHNw1OH5x7NAjj4rliV233T3Y25Fu71Q3u/fiO6+I5m3bBnYvXTq7+yceacelbNeu
      anFxYOeOTdt88cRrPN299dHdLVwXtnLUt3Bd2CKgLVwXtghoC9eFLQLawnVhi4C2cF1YISCn
      uPD8s0+9ceL84szID5/84ZsnzlFO3zjyzNPPPj+/XL2eZ1C/dOrcaBh4lK22+MKl7zz54rUZ
      gZxRz2/0aG/h/Qf58pe/DADA3D/+D388cNtdLAhYcfT0HIj5UxO+cezF53bv6PnekRMP3nsw
      qBReeeW14cm5jq7OmaHTx04PtbU2vfP22yPjU509vQSJiUun3n7vQnNz6rUjLzpCh8r8G8fe
      mS8G2Ctcmq2++r0/PZtXutPspdfetnIdGUuHYPHrf/s0FaLJJiNzZUtUxgteSzYVeeXXXnmp
      GKkmr7z8yhtqumV65JyRa750+kylvHT65MlFVxQuvf6X33qhs6P5zKlTY9MzVY+l1WB4utTa
      vJXK/b6izoEq80HTrkO7u57+1ncWgqi1s++hBw7NzkyFlaWjr7974OB+DOAuz5y4MB0tnP/W
      d77/J3/6tTdffOrvnjzy9DPP5zp6NIKq+ZFvPvlqS9b0/Whq/MJf/NnXLp57d8FXTr34/ZGF
      4ujEvEJIR1cnp/6F99786reekY9VDdsOZ7790ntHnn7q6DM/9LEBAM888bUSyQB1v/7Vr6Wb
      0098/YlXXzpa9PzXXnr5vdePzgfKCz98wmXETDVDdeboG+cGtvW+fuRHL73woxLdksjvN+ru
      6kx3tnLpyaOWbZkY0PCZ4/MnF+/7mV8sDZ/5R//9/2jVPZputTSPmd3brWmK2dRz3x2D87Oz
      +3f3YwBMFB4407PzhYmh8zNliEKPiuLivOfTlpYmPOK1tDQvTE0/c/wtR5DAqcU1A7cyM0+y
      PYP79OWnL7o/2Z0BAF1Xp+dmLUIMjcxMT2PNTGvOi88+PbXktmazO/YcCKZOpnPNXnm45LR2
      9w9u69t2z+7mb746/eXP3sh9sbZwJVjxREeBMzQ0mm7tajLEyMRsS0dvV1t2cmKyp69fbpy9
      NHHya0+99/ijnxgc2FZcmJrJl7fvGFhcXNq2Tbr5xeLc1Hwp2N7XOTE+qRnGzOm3pknnA3fd
      1tNizS66LSk8MrnY05WdXSgbpj6wrQ+YPzQ8EYG6e1f3U1/9C7L78Gfu3wsAPPIvDQ2nWrpb
      bTw8Nt07MKjSyuh0XtfNtEmMXIezNNfc1jE1OmxlmzjSelrs537wzXL24OcfueumdeRHFVcR
      yoi8Sr4cdndsHpKUKBXmuJFrShlXUvfoyGz/QN81rohl0djUbG9fn4Kv6fYtXAfqBCT4my8f
      8dXsQx87RDYYBhbOLVbc/ITVu7czK/MPxbFXjiA9pds6x00dLXZH23oUJtiLL7/+8CceKubn
      9KZOcyXQK14+dv4nDu19/cRFjODe2/d8NHYX/vCgNpJ0eWTKz37+44fefvP17Z250yPzjhOY
      JgEznYZgqRw0ZbXlktvWknvl2NAdO3K8UC60NrvcvnNn+rVjF+8+0E+ZPrsw++Lc/OM/cefo
      9FxrS9Pk1NK27lyhWGrv2pafGjs9Mvvwxx98+anvNt31SDQ7So3so5+4n7nFF1871bp9YGp+
      SUHXuuxiCzcPtfmO9XRQWSwUCnMz04X87NT0VGbbfi1yD96x/8SxdwH4Ur44MNA7Mb3Q0dOT
      1khnb/d3vvGt9q5OzUp19/Q2aVDyQtXM9HR3j5497kYicEtm67bi1IVqCKXpIVdvb0rpgHBz
      c1NXkzLvG4vTYwLgxHtDew4MHD81xDlnclnnFm4prOhA+enRmRLrb7dGJuZaWlvtbCv4pVRL
      u5OfWnBQe0bTTLPihu7ivJZKlxYmjo04X/zFn8TApqfzaR0CpIShcIrzTW0d09Pzuwb7qj5u
      tsSZC2N7b9s/fuGUT9J37Bt0S/nReccGB1Id27tbp+YXe9qbp+eXIsYIQl2dreqWHnNLYSsf
      aAvXhZoOFEWR5zXmjW9hC5uiRkC+76dSt+qW29VqNQxDuWwAY6zreqVSka/jOA4AUEpTqZTv
      +/KjZpqmyRsxxmEY2rYdr3gKw7BSqWCMMca8rpMhdFk+jeofA0wWU1VV07S1yxg2hrj679Qm
      QSlljPm+zzlPpVKqukk6qxCCUso59zxP7m+JEJIrikzTvNwSvxjx2qMVe/oW/RaEEELXdUII
      5zwMQwBACKmqWqlUDMOQJCJLGobBOXddV5aPoogxZllWcvWgpmm5XE6u6xNCOI4T397QOfF4
      x10ZE1kYhopydRsErq3/quC6ru/7AKCqajqd3mBdomxwGIau60qKke+CMY6nQRRFpmluUAOl
      tFqtykVkt/xOZAghTdNUVQ3DUA6267ryEmNM0zRN06rVahRFQRAYhiGEKJfL8XgTQpLr5RBC
      iqLEx6ZphmEYb0oKiWm2lp7iA4QQpTSKok3ZwPVDCCGXBRNCbNu+HOFSShVFEUKEYSi5cvw6
      GGO5FpYxdoVEzOuADwEBQZ0HaJqmKIrneWEYWpaFMY57M51OA0AURRhjQoj8utO6dNAAQohp
      mo7jEELWSrEkScXHUKfCDVZ5Xg7XJsWCIEAIGYaxAb3KWUEplRsyJ1mUaZqMMVVVS6USAGCM
      LcvauBmqqhqG0SjCblFUKhU51wkhhmEYhmGaZnIVtxwVjLFt25zzdDotxzse7A06S0pDSQrJ
      uxog+VOSjBBCG6wzvxyugYAopZRS0zQ3VbliPpqUtrGwrlQqspdM06SUbsw7OeeymBKz61sX
      UniHYSg7Qs4eIYTUKFOplOu6UngFQcA5lzPVcRzZBbKGDUQ+IUQq1LCGXSUpJsmBIKGnX+27
      XFV5IYTneQghXdeTbRNCcM6lXij7R2rKaz+MLJVC+XYYY8MwPM9TVVWqAVJZ9H1fCKGqakwt
      kuwYY67r3toEJISIoigePKkDycGTSiKlNMk/pMZdqVQIIa7rxls+EEIuN4Ol1NvACmvQjQDA
      tu1rkF/XAMl+5DAnz8vJY1mWFO5hGEoVO4Z8cUleST1a0lk8W6RoC4JAzrR0Oi37Vr6pqqq3
      vAhjjMk+kj3IOQ+CQHIjyZBjqpKWkbRO5eyEurIiTVlN2+g7c0nhwjlHCDMhOAeMQUls1i6E
      iGv+Mb96zQ6H9bY9cF03iiJN06TBJfsnyX4a+CXUbfiGk2EYSgVr7etI1hVF0fsd+5bC5UbV
      JrtG8vD6VnRC8mrGWBiGGGPpEJLsV3J1ObdkDWEYSg+K67rrNkxWGPegpKSQCS+CgIEXQUBX
      Madk4R8rpP0Fa4hVvr7kvpICJDOWV+VBPN/WVovqSBJZrDxJ34fsMdldNyF5wnGcy0kEzrnv
      +47jSENp06qk7WrbdtIGid8Z6pw5nU4rikIp9X1fUZRYJCX1St/3K5XK2ucihFKplJzldT6E
      ogSlRay+vaUQ0u6LosZPFl/h60C9HjnwG8806WUAAKmjxOdjnUZSkhSmsSiPH5H0/axtQHyQ
      ZD++7wdBUCqVSqVSpVK5aWa8tIPWnpdf/ZGzRzIJjLGmaXK6NGgVcgZIapDcJR5jqRXJR1Sr
      VekdkYMRhqFpmlJsSUezlHTygHNeLpfXunE551EUrcxFQMlel8dJ9Xmt/bWxZ2+lKiE4547j
      UEplkzKZzOUMHem5kEpMGIaxtShZshSm0m6QP5OO9XUf3XCc5EMSsZ82yY/fbwK6XD8yxiqV
      Stxc6ZKXjEH2vvQ9YIyl5uj7vjwpy0vqkU6/5IMkG1dVVZKjFKCWZem6Xq1WJcPAGMdMXggh
      uVSynZJ/xK42BKBgoHX2r+CVfVNjor/Ct04iJp1YBGOMq9WqZVlSXW0oDAAYY9kDURTJ14lF
      uXz35C0NBvzlsLap66pHMd5vAootzORJaSaslR3xLdJREYahpmlBEMRTJDYugiCQTmepGRBC
      YjmFMZa7OEob1fM8abdLvpLNZqMo0nVdTi+x3lZ8hmFomua6bjwkOgGMgHKhYKQRiCewqqq2
      bV+DDiQd5UEQlMtl0zSFELlcToqJarUae5mhrmMFQSA9pTHvxBhLEWOapqR1yZtjpRNdxoEe
      n2/o/wbX6Lpl4KaIsEqlYtt2UkxEUbRWb1gLqSHFZAGJV5J6AwBIfQgApMM+lUpJBibrlwex
      QJHcXlEUyaVkGcnhkkxIDlgYBlHEFAVHEVNVFYtIx7UwGmNCVYhp2QgBuiYHdBRFFbdS9kq2
      leKMa5qWnFGSPVuWFZ83TVMqi2vNK8lNpQ7A1+ToSW9qFEVyMiT1RVgjyJI90GBMxOdvAgFx
      zmW0XNIQQkh6LOT4xVotrOG6SfbQ0C9SFUAIeZ4X3yV1mrgqabNAQk+KOYoQwrbtSqUi7Qs5
      WrF3TlJnpbTMQLVMjUah7/tccEXVU5bBaLRc8VvTWtUBrGg5TRNCRDyiIjKIeYUfeR2qXHhl
      +mggPAOb++yD+7XbGyLkUsBJK1I6QqV9TilNDmo8neTESE7Lmv1Yjxgme3itzZUkrPjqWqX7
      JuhAcbOkrzOVSslOkdInOaKo7vqD1eIMrY6BS8mlKIq0V2O3GNR7P/bWJ/tFahhSc5Lx1CAI
      VFW1LEsaibJ5kpnJqgzDKFd8lLIhDFUFBRGmUYjA8P1QUzBjrOJWe3q6KYuO5988u3Qq4mGL
      0fZwz6fazI6NO2TemX1u8ikmKELIYdVjpdebrZYecxsAxNFc2TOSXOLXhDUiCdXjLTFDhQRZ
      yJnT0BsNZSDB3ZPjBZfxUNwEApIqrewLaW5I9TnmLknOufanRPySsSIZWweGYUh3haxT2rqS
      M8UTTt4lIxjyfBiGnPNYeEmhFj9Xyj4hIHArARUp2yLUx6pGFKWtrXVxqaioSldzU6lYvBSc
      eWP+JdnpFb9cCou/svvXTcXaoEMuFs9THq28HYJRZ7jH3CaEkII4l8vJsZfe8427VxZoUAni
      d19X6alE5aWw0KF36aRxDVaDUfKBEGGpVIoxVq1WdV2X+RWSCcUFGszIhrnSwFelizmKIqlQ
      y7HXNC1mZrKAzPeIO1Fq1vK853nS3JVJZ1EUSW0jqembpklp1rQFxjgNIITIpNOpVEpe7emp
      0Yfakrl0/lxyjMtBcaw8vK/54OV6gzEW1VOO6qKHLIWFc+XTGZTtVnsQwtIpGoszkXDhJHsj
      /ruuFt+g7sTsJODBD2e+7dBqv73jkY6fRGu2RU+iYSzg/edAMQPIZrPSGYMQSqfTUqxUq9UG
      adXQL0l9KJZl1WoVEtEuqWvHxQBAqpmWZUkFU9d1qV1KH4FMJwKAarUqawiCoGFTbUIIxkR+
      fgfqHvC1b8cEZ0DjkZaBWI9555ZPX1w+hxDa33RwZ3a3bPmSv3h68US+uuCGLgOmgNxRHxX8
      QhVVF4M8CDgY3XWo+X6ZbSx5tljPGm/gE+t2ewOpSRYuhAhZ4DMPAMpRSU7mZOVrxVwDblos
      TL6ADNlIub6uIZacakkZlKQk+dqapkVRxDmX3kXpKAIA27bL5bJUI4QQMuVDqqKy/viTBlIB
      ktZyw1STClOcNi51r7Wt1bDWaXVXwrJUvBBCBJEFd/5C8YwsMFYefrTvp/Y1HZiqjv9g7Nte
      6EqKpyJCgEzVDLivCMXSbOnxOlV8d2dmd7vaGXtHk6+/lpgadGFYw3hgTQZLWk3f0/LgtDtx
      IHunqqiZTMZxnNigSdawbrU3cx2oHBUpdGLvTozLTaZYsxZ1w1ISme/7uq6n02nDNBlbEYiV
      SiW+0bIsqfdIH4lMeI2iqFKpyBB9JpOReUVrn56MtkoaXds2hNBDXYdbzXZJQAQpd7d9bMaZ
      XGk8iOMLbwLAc5NPuYETm9kmsWw19Uu7f+2OlntsJYXqrmQBosLLMkclHvgNqCTG2h5L0o0Q
      wncqheUSZ9HCQmF/5o7Hu37GcnU/YpVqJfRdx2scjnU7Hz44GYlrBwyh2udO1uWoDdINAFRV
      VRS15AauF4AQCgGdAEK1EJV0/8RWFQBIZ6OiKFLvwRg7jmNZlvSUrG2hzE6ULvINksWyetMv
      DP7Xk5Vxn7kdVndWy75XOBZfFUJ4zAWAUliE1UQQ8kCA6LS7TxXejQdJU7UUSTdwGlR3UqzV
      hJKUBKslV7KRQojvfOsrS8Gee/ebU3NL93zqsz1o5htPHmttyS7mL21rbt9z/6d3GFqyPKwm
      1rjCm78SXXru5ZDE8kiaQqqqplIp27Z1XccYSzaefBlIvEkYhgtLJcf1ZYmIQchqRqkUN3G0
      KAlUz/oAAEqp1KalC25tUw3DyGaz0jG9wRvpRB/M7T7Qcmeb2a5gtdte9fHQ/tTA2lvke3mB
      t6dpf5fdUw5LpbDIBNud3deqtSeDPFCPY8QDGQe/JD9LSjpYExCNL9115+3l+bnTl85bJBie
      K/qlQsf+e6vF+alzx0fL2vb2LKwnvNbytptPQDIJN5vNxolRcshN08xkMjIElkql2trabNuO
      XajrMFiEZHwq1l7lT5nuIxXbdePbSXkvK/c873IGs1SVrjyTEyN8uOexDrMLA8aAe1LbPt79
      CACYih3yoBQVS1GRIYYx1rHRYXfqRG83OzFgIURayR5KP8AZF4lMS1ij2FqWldSLIWFPNBxL
      SPobunjJD7xde+8olqpqsFTRO+beftbMdQ/effhTu63XTk8kaQ7qMy1ZiVQoa22KF1JdYb/8
      OCBbUq1WJUNam9cnhJDBLEppMtO0BoSc1ZsmEgydLdlkNqeu62szxqMoKpfL8c/Yqb1BJPxq
      wQSbK88GftCZ6bJMSwjx7OQPn514Mh7XnNr8s9s/f3vb3Qihb13667NLp6ig3Wbvz/f9KkEK
      ABiGIT1VDVwBAKTuX++DVYnbawlO1M1SQlilAul0YxpdA2tfy+njk3IJ0QdFB4K6C0f6Yxo8
      9HEB6SSU9pRI+MQAQAihYojqTEgIoWCQwW25skIIIdPHdF2PwxTSapPKRINSFUXRDSEgIUTA
      gkK4cGnpvFrU7u65t9feNlK61G52lMMS5ZQgRSf6QHoXALieSyO2FC0SIEwwVI+ESKMyaX/F
      9TuOg+o+97VXYT0yIoQgpGQyEFshcoI1dGl879oghqIotUy96++gG4LYeZPJZFBicVYDZIYh
      ALiuK5Mcki+mKQBUUI4wAlVBBNUiEtJRBHV9K04ljoPVSW4vx0mmFcuEm+thzEKI9xbf+dHE
      k3PurBDCJNa56qmf3PZZh1Y5iIyaU1DN/eOBm8XZkfKlS9VzBIiCFCKUIAwsfZUXWzZGGrDS
      wRifj6lHutE30PST0lDansvLy0II6YBtmJzJn1CfcrF8uPkEJOoOZZnus2l5aQ1BXV9BCJxq
      RTdtGvpY1XWFoDDUVZ3RyPVD0zIYFQRxUHSCVrhxnOCh67r0/cTRaUVRLMsKgsD3/VKpJIO+
      10xDs+70i9M/ynsLnDMOohgtVWn5axf+jPIIEOKcG4qZUlIZLYsjnC8tjBVHNdBNbIYQmprp
      BFVTW7ViRI6lYRgy1SkmBTkroJ4k5Hle7GtYu0YnKZhiNzcAmKaZ9HrEZRBCcn2LzGyMORbG
      +KYRUEzUsk1JA3tTUEoNw5CCP/JdL+S6wRVVrToOsfTF5XJ3ZzsAKIg7rgccDDtla4qMIyYn
      XxRFkmqTQX4ZFYm1jWq1ms1mr2GRl8Rw6RIXnHEGgKgIAYAJRqnLgEuiiKLQp16G5JacxWfn
      ngy4Dwj67IGlsLAY5N9jxw9bj63lx7HiH1tYcj7EJW3bltkHDfxj3ZkgM+elgz4+KdXk2OyI
      VUPJ4STbVlX1Jlhh0uCM27oxs10XpmlqmmbbNgBgRVOJcP0QAwjOS+UqAk4Zx0ThggvOAt8X
      nMugW9LKhfoSXWm9y5rjDkqaZuua9FcIBIAAaVgT9TAIF5xD4vvdAFSEs/7UkYVnAu5jhNMk
      8+m2n8mRJs55Rs1Kz0KyTtlC13WlfRC/VEM3SqtWVdVYKq1tnmS0MqUOAKrVauwjQPWgW+xD
      gYREk8UYYzeBAyXdEtdcQ6IqoBEzdeL6vqrrtmm4rgucRpRHTGiGoSiGhqgf0vgWQkgcapUc
      G61x08lHSF37elo7mN3zTv7tFqtt3p2N6PpJcwKgTEsXKmc1rGXV3C57X0bPfr7/lx1aTSkZ
      lzrggUxZgTpNy0iwNA7iBSdruyjWiqR+KT3scUxN3mIYhowjxSQo6l5KyekBIPbEQmL4pCH8
      ATLjrxZCCLnq9HLZjLz+GWL5jtKNBAAy3LPuMk0AkLFVIYSclKVSSeYJXZsUE0KcXT710vTz
      AfML/gICVApLEQ9rqfgJPoQAMOB2rfPxzs/tzu2VJ1+Yf3rcGfnp7s83K61yoa20A6T4SHLT
      mMdgBAqtghBUTQFaabNlWQsLC/K9pAIeRVGc9gqJtQOSvCilcZhZSnaZthVbZNKbevOV6GuG
      9KHJuZg8H1vjccow1DMS40wPXdcl5SW1n3iVNOdcGoMy9TiKIrmc49oaub/p4O7cvmKwrAr1
      9ZmXn575Xkw0SaEiADjwxSg/VDnXbw4sVRbzaD6nNlf1ikksyR544ovgSX0OEowB8xDzCAAw
      C7liJlsiyUVKvTifTgiBEQgBUg2ShRtcGAgh2W+SjCRj1nWdUnoLExDUPUOSPze4vOLFOklz
      VAZTGWO6rksNWvZIXEBSjCQdhJCqqnKyXpcahJCK1DazXQih6VpayUThIr/sjrRoIZp7Ov+9
      clhyI+eXBn/truZ7NVUDgDgsKEWwVE1kopxsp/RWcKRwpAAIotuWaUm3he/7i4uLcV4Ury9q
      RghhEEpQFIBDNRNPNimz5MIp2Sx5khAil2uqqiq1q1ubgGC9oHTykmTsTABGCCMkU46kI0Aa
      54ZhFItFyWZkf0nlQMb2JTHdKH80QogKGokI1ggveSwAFERc5rKACRCf7H18oHWn3DEtubIC
      AJqbmxFCMoFJ7gcVp68AIKpmAEAjijS8K5WK9E1AndFKUSXTiAWAQESg2i5b8ZLTWHhBnb1J
      m0MarbK2m2nG3yjEPRsrAUmSYhx8KgQgAKHgWnwe1Zf9ykxqwzCkViHVUjkY168+xxBCDBcv
      LroFW00NFy/6zCOIULGyaEtIGhIACEIRedR1oNqitd3WdjtCSG5uJISoVCqu62oKQZjEViTU
      3VrxqgQZh5YKouQxSQebnB6Smcm1UIAwVTOifjXJdWINEtU3PJEqlNwUkFLqed4tT0DxtJA/
      Jc+or+0VHkVQz9GkHBACQ6n1RawzJp250k65NnVnXQgh3pp/7dXpo6Ww5NCKqPMdjDAA4qKm
      yCOoZTUxQZejpRatVSe6qqjSyyet8UwmI6iPvOWAY4fgTDZrGEalUpFOUVVVDQUQC3yqAyDH
      cVKWaaKQGNnFYjm2kJIGbGyNJqW/pD+UcEDL/pSboLW1tcU7AtY8Tzeqp24W1oYa4iArX5Pe
      S3ltksn4kUgEvzRN23RnrmsAE+z88mlA4NIqEwwACCIEKa1mWyksCSF85iFAJjFNYheCeSo4
      AnC506S3uBU3ZMHrhZcD5n2s9eM5rYkzrgHTEUduIRSeYrdKs0gVAY88FmGNABJouVjknBua
      KjD1POdy9nVSv4kPYv6N6llWkkDj5AgAEIJzGgoWKZp9yxOQ1Arjn0kXJUJotaGziqCS/lkA
      iPc1E0JQxgWAgjG+7l3PMcJpLVNw8wIEQiitZD3mMGA5vfnndvyihox3Cm/Nu7MCeJPaSstR
      OSymlEyL2WpiEwSMVIfOl09hROxi6sHWw4hoEdIAuCI4gFAUuckGwzxQMA+Q5gpFRqMZDTEP
      mJkjGMNmefLJA1GPniKE5Cpby7IqpWXCPPAogwzChFYKnEVAKeP+LU9AcrFzvPlBUpwREBgB
      4yuEohKA9XKs4lSkMKIlx49oTbewDTVt6dfDljDCh3s+zfhTTLBqVEmr6ayRbdZbf277L5rE
      iqLoZ3u/cHT+R+eWThVh0VKtlJpWQMEIt9udS+Hi8eU3CkEeAaL2bVLNjyJi2xmEEVUNzHgU
      RRiTgOtYUFANHoa1rYwJ0gV1Xce00xs0XwghTXhI5P3ElCTFlmVZuvBo5DERCRoAYMEpYwyE
      gOjW14GkyhJ7llEi1IUQMlXwI2ACEIBKQEZu1g3ZIoQiyhbLXnJGVr1QCMjY10VDzUbLFwZ/
      2Y/80/Mnp72JNMnsz9zBfVEV1cCpOqx8sXgGY8wE07GR05tDFvTZ/fd2P/D0+PcZou1GB2d0
      wRnH1l2gWZqd8jzPtm0/CP0gVAgRAEi3PM8Tvh/vT+37ng+qQpRKpSJPri/FqIt5wJQUw2r8
      1skClmUhwZGoRQY5Y4KHAlbSFm55AoJ6bornebFzeYWMAAxFAEKobizH5BU77A3DkEZp1Qsb
      ug8AHD+0TVW51mCqhODAAr7T2j1gDHLOVVIbLc45AizNMIRQh9n1hZ2/LAA0rGGEHVoFABWw
      ECRkHg9dTbeQ5xmc4cAHQoBxHAZc14VuSAuAUBdRHiATADHOiVLbqfhyEwABRyAAeGx5rE07
      RJhgVVcEF0JwLuTcjP3yHwYCkiowQmhpaQkAAq/q+tROpyF0uWoT5nNipEzN8xzH8XRdVXQ7
      8P1M2pb+jHgNRhjRdesPKb8eAhJCVCsV36liRY3qOz7J84pumFS5I3vfuepJU7U+3v1I4IQI
      IVBBVdWdmd0LlWnBuQDRpXZqxBQCSBjoALy+0QwAIC5EnPOFcBTRUIRy+xG5O8wGG1VRxQZu
      AFYaNEKozzTf923bVtNtzCtHUYhVSxEh9ytx338YCEgiznLiNEQhVzBUgohgpmAkBABChmlG
      DGHuLxdL3d2dWHDG2LoreBpw/YZZFPicUkYZMQxCiOBcCI6JggkRAAet0YvGZAAAFWJJREFU
      O/dk9iHAlrAoo0IIx3F0XR/U91KrPONPNeHM7eZ+gnHEuQAEGAHnSAgQQqgqr2f4M8YYKBxj
      U9MQQowxuTkJxth1qqZhIJL40F+N1yIk2eF6S8xitoQwUewmUr/KiMpDDyFMzNSHh4CkvVCt
      VjFGBIEfhIRgxigiteCfQQRp7RTOfKatxa06nR0t5XI5CEJp7euaomuK6zfGZRGAqlwL+6n7
      orjneRHjWFWJomJFEUJQ3xOMqXZKJrIhhDSkRZ7regHWNKLW8pQx4AOZgwfNvcAYCCEwIRgB
      RoJzzHnNxIworlZ4Ki2dF6qiYCy4EBGlGOM43q5QBwVFByxCCOYRIgrlID8wEq93a6AeXN/G
      FQAYjYKIGbrqB6FhGAyp2LZVhdAo+PAQEMiok6qSdJaoBkIYBOdyZVgQGoZp6KqJFTA6ARNb
      VwAhRVEXyy4gjBAiGOVSZhgxmliUiBCkTH2jb4BeHjL+IPddBIQAExEHQTGG1X5zTinIkHgU
      SQISnNMwIIqqClB0nVIqDBMYQ5xj6acQAABIcEQFqlZFKhUxZmgKCd0ANEAr2zorigLY4oxi
      hsrF5VZTIKFxJS1DGZAw4DHGIBjmERKcI0IUXaZzlIuFigetLVmnXAwCizKuKjSXTS0uLX/Y
      CEgGIjIZXSYWBhQYR6qiK6qCJQMnCgBgVRVCUIGgnrXOuPDCqC1ne0HkhVRwoSrEMlSFXGNO
      tDSDpctbxh2lj0pRFKKt2EQIIZlWIbVTEvMDzgVjHGNqWZplqUL4rotdB9Y0RoDAnFkgcp2d
      CKEwsCvLy6t0NiEAqwirhgphYGhq5DAsxbe00VZEleBqsITr/nFMsp6npVIpVTcUz4kEsm2r
      WHENO+N7LmRtgA9YLKwhon5tkPsEqqoaRJSFFAAiDjF7FvUF0VEU0SiS7EEIwBjhWhgfGZqi
      1yjn2pshP8Em9+qWz5UZPDIGJz11MleQEBKEoaobXHBEFJmLIwhBqsaEiHw/DMO2trZA7hiB
      kNRWaq8DAAKEEFBfL6sbRlNTk1xNIIQgPCDMj7SsTNhIpdIAgQi5pBuZy+D7ftogQgjNMJCk
      HgQAwMOqZrcAgEIIKLpOoOqzltY236nY6bTvRylL/2ARkNTj5LcvrnnwYiehSggCKgAwgjAM
      NFUBAM/zfN/PZDK6riuKysqu44VcCAIojOjcYsjrkkVXiaYqKXOjDcg3BSFEWkxxMob0fMqw
      f8OqWYIUGQyXwS8hBKnPJUqppuuhbkDgSwGHGBOxgi9E3MSaPU+IXEAnEOG4tn8Sxlh+zIrU
      Pw8leztnYsRDK5UmqkmjIqrvGooQkdRvWJluCwDAMEwA0LXm2sOMDxgBQT3Id0Oqsm0LEHh+
      iBFEYegAMMY8P4g4UkOWIoQQnEubrh8hEAThkuMDIIUgBP9/e1e23UZyZCNyz6oCwEWi1G23
      p///p+aM7RlLokhhKVRVbhHzkACEpsSWmovItnmfcEAQtQVyibhxL6ZCY0haCUTs/F2ML3ZN
      EcxpHABRWldKEcBUirUuhFCTe8wE+0Tw4doP4h6wH5XHcVwsFjnnyleinHRMIsUdE0yKz1Mb
      83azjKSgxH47tW1LUvSbTdPOtVY5jCRtbWatvQPOGsXbkVXrTxkAlYOyY4gLv5iGjWtmKG59
      Is8ugOALeu+dIYSYdV3jSy0HMnNMeYgspFxuRonsnRWIRktm0Xqz3kLKhY98ZHOmlD97Q30T
      zDT2vRDSNg0RTeOIiELpyjiFA914L8dGpeRxkNZRlRGOQUh1YHtxycCMSgPAsFnrvRkKAigi
      7joAkOPAREJK1bb7s6BN31t3EqZgBI0xe5FAiEKwvP6g3PztRVtvsnNuHIZGJSEUoL26ur64
      uNDnv5RhySUJ2wJgXL7PUHR3ftslP8cAeljUak79zRUYMY6ZuFC+vPr0y89vlBTni6YUirlI
      gVT3/AwAwAAM0I+hsdqa77pROaWx7xHROJdzhpwYIElV5ykpZUrEYkfqq/1MqHTKWSqFCJQz
      APJha1ZZStqUUoCh32xmSllrISdFZLzX3gOd0DShUmLPRmXApvHr5QqtlFQAgIida4GJGIEL
      AwPv+gWGbS/KRIVKESGVYRjm87meva5fRTmidgWVuv0n9O8fQAcgYudtSCWkzMxMZtlPJzNv
      tWLF620opSghamWRaFeTJ+Ixpu8MIKW0bRohJAohhNi1oTNEAO/9OI5GqRJDIDbGGGtLKaiU
      IKpPTvmGiHjf1i2tq6QlZnZdBwCr5XKxWNjZDE+hrtVACLVX2ttdJiAw66Y5afXlp5WVLKVj
      Itt23llvcAi5MTtOj3UeWVMM8zyMXwz8KLWev6nrpNsESf6DAggAlJKvT7sQ8xTTcjOuhymV
      ctp5YEopEO3Sr0Lst7UAiGD1994lFKJbnNTXxpjFyelmuTTAOae+L0KImDMR5ZSc1ogohcAj
      r0ncs9sq7xb2yaTdw2PGnIZ+k/c69ovF4isDA+Li9PUCAADemt1G/Vj+/LhNlZmb2QkAD9f/
      apRvjphDNW6qL1bd2H69HPudt+bfBgLRW03MWsmYyjSld1PorLAKt6FUwSQqXOsEUuC8de77
      hp8v0S0WDLC+vspE1luNmJnPLt68++c/hBQlRYpROF/7+uq2SEkBgCzljrDMXOc7yrnEoKwD
      IYZhEELcZjlyjErSRS7T6oObnaG82eNct4TOOXfydqczRKVMG84JldFuVheDtVH6q4f7E/eF
      3QfMPIT0aTMigBSgIRfeSS8wUUHDAIVYCuy8RYHeGm/vklkopWzX676qx5dMgAqBmZrF6RRC
      GMfC7J3LpdRfeR4HFKKgAICDGGhKyRpDJaNUNXt0cJe+9QJLzuNKKCNsl/rrMq707Fz5xfEd
      qPmC648fvCxaKWG8sG1aX9JeudF0p6o9qx1ktxUNn1cAEREVlupeghjfj5hKzFkhrDb9lAEA
      Gg05xYw65aIEZgIGFAgC8eKs83+kgf8YBxPn2kptrBVSTtM09n0Yh0orkdrknKUUdW3zmZZE
      5Lyv+aEDJb7msX7niKm/omkDgPr0ZwSkOAjbHu/Ga8mWiHS4pjggotBWaMc5ElH1G9HW2dO/
      4lFz5pfP5XlNYf1qyLHMzzqlH2Yn//swWmolPn78SLy7RyGmFCbnETg31m+2IwvFLBAhhuBu
      oWV9E0od2dPuV6NaqW2KtQqGzAWTUvo4g1olpAUTU9FKIQKiqA0637TYFdIQAAqFKFEI6ec3
      PoCIbdtu1itK0+GSShhLbVLYp6EKlTrK3fAP+Xxpd7gd9wEzh0zulvjQRgOgkI81/NxoWwGA
      vt9OiXIcpTbO6Djl+XyeUmoaj4iz1nNl2SAAwDRNVQriQQbIYbNOMe6KLESYs9gbCdbHl1Ly
      TcM5gxApTCUl282qed7xFdUXN05JuE4bV6Pnd86h8X4aJAMopQGQgQtIiQWBAaFIX2JCzIfG
      oDoyHec5n0Bo/Eb0HNpHAMA11reW95Xqw7884NFvdAlOKReQwniNOcedCtjxlrXep0qvqQJ7
      WuvaC3HbuvI7IZUy1obqDiMlA4jffmEOITHNzs7W6w0Iaby+ET1USr9aUinNbKatoxzfffjY
      LU5nTn1c9hevTjer5TDFrnGsfBz6k7OzY2IB1gHNtXna5kJSojQugBdhBRTd/M1YsMRYG/Lr
      Hai6W7UxvNqTPcEIlAn00Rhz+f4fIbs3r2f/++7yv/72NwT68M//cee/DMsPzijTnbTuLpWE
      7zyZMA4IyhqpUNfdzZefuSHwdhB/qbPJnQekZjZvutk0jh/evwNA3zRi/1X1cN18nmMYhkEK
      LAS+bW8kY8a+TyEAwHa1Wry2zCVnMlqtlp9CBADs5idcLqcwffzXx7/++uuXtBQhpF28AfyY
      pkG6TrenRkiieUlJWieGAX/rrFC7datSYAhhGMYn0Ae6wbBs25apCO06X5eouFjMASAM623G
      xt7ceT4gEHE+6xqDWuy4m5UcDUdiFzeC4/gB55zX6/XvO5t+8wxc03SLE2Nt7dI/Nl2USmnn
      KaU8jrW8+vtfxszWudWn65hqtpLHfpVl02hx9up8vVwetQt8BqCwiwt3/teAboophEDE2joA
      cM7VJtRaiK0kAqXUbDarmX1KT2F5eSOtMgxDSUx1JZBjRlVLwbZdzJxYbaeT7sH6RL9EFfSE
      37ZzHP7K+6IVHhmdwFH/631EFw6oSllVPBSP2h1rVw0IKa07UHaO4buOqFApfjYTQqDxRg7t
      4pVVYh5iDIEBuUT03UJbShMBSABguHz/9yn5sxPbr9faNSElbZrzk/by/QeQKk7btm1DFuen
      s1pviduVazqhLTPXObTW/FPMz2EbTymx/iHbrq+iSn0BwDiFklMVQKkP9Tj9mgrFggLBKjhZ
      LKq/qff+MGjdGaWU1WpFRIjADNUCpuqHaK3rmqPmbM7Pz5kI76f7Cczb/urqU/7LL2/WV5dS
      qT7kkvmXv5z+/b/fK6u5TIHUr3/7S8lZSllyKuv3yneyOS059f22mc3T2AvTaPl0pPqcyrAZ
      jdPWmydR2jvAORdCGCIVYVGCtaaul6uBy+FjiZAYiEERVPeWqoZ+/xOok2CJgVISxlYa/DiO
      O14UUQpBSCmFiNPULz/Nz85RyspQu8PhGGAYxpL46sP/TVm+8kbF5LomBPaNjoWlMj8t5h+v
      V6/PTxAAtVFnPwPKlNLq+nK5jWc5FjQ8XDv/dL3xKeacCjPYW9g2OeUYstJSm3ttdr6Jyuoa
      4gT7uanu1Q86OvVjEqEAIIDcka3wezo6vgdVoRF3E2Ux1nHJ2rnqPwRMyACZEhU5nzezOUrZ
      931V6LnD4RDh1cXPi1PQeieh5PxOFODVxWdzRXf00xjGsFPuFkrAOE7Rto5SoUJPFkDWG2DW
      t6yRcyrr6536ervw9tE2YhXVvWA7jEwAiGPayS1UAZRa1zQSlWBEQLhpHnBPVPopSCWVhuoP
      HAMqxUICACpdiKpLlZSyaF3Hv3sMfogo69h6KOLe9lEiqjqC+zc452KdnLYrZZsY4xP6haHv
      bq0MpPi5vSaF/NgBhIhVd/zdu3famExCIBCwUupgBIMIcn+jiXYlhQc5ehV9ZqZSSgwJABjQ
      KqWlJKKUi2+axWJxWLlz9VmqmptE2/W6lNzM5vp3LWDuhgMXr47EUplXr14BAHNl+j6Q9tYf
      AjOHKcYptzMnb2m5UloB7KJe37UY/kchhFDGpVIaDbUcj18z/oV9/9BDTaxN06w+fcrTCIha
      aSRihJQS5FxyFtbNZrNDsBJRDlNNBwNAinEatgAw4kaf3cob/KMopVTJiuMtKjNQZGZABKF3
      vOmnGYHCEEumGLK/NYBkd9KkkJRWxj1iKug3ZxVzyJALpJIVJ601CzXE0mDWR1I6NRdSjese
      5LhKKSlFBmAiyAl2YquYAFGq2hJ0rJYqjT0cXUhZs3xKP9jwU/Nb9fVRYY4owi7dglgiS4uI
      TxRAzcynmK3/TWT0q+s+8MXr09VytTg5BZpIGevN8vojS6uQnPfDmObz9pFW1JWCCABCSG90
      KTmkIpROOap9jth7X9fOD1tg0dbGEICZATknABBKWetqylsc+ThVrVa75wVIpRavXhORutOC
      +quoZf8b+TCgffTs3gIujOoptvGIqI36cmIKcQRoSorDMM4X809XV9i9njWm77fNXI/D+nq1
      /fnnt4+3H3NWCWQWaBUCsJTScilccswxQjUSeMCB5xhKaWVddZxR2gghlNZcSplG99tsQtd1
      TGW5vGbhnKQx8+nJqVYwbdcZNRVSUKRv7Z3asSvqYut44t5f8ldS809vOHeAti4P2yyMNSoM
      fSKMIQLzq4u3FMdM2Dg1hq9rij8IqBTFqTMod717LKUQwIfy6kPV4b9EnacqNdFYq42pxAHx
      pcgaokAYpyCF7DebXa9HyZ+urscQry/f9ZHN/Vb3tYXteP0HAEJ+HnRrZaO+84z4QEYp3TRW
      IrSd9c1P1kWCKaQcR9PMG2Tr/TiMDPaRBqGdHM5RtauSlL33Nbn3gOKbN1A5Yjvnr5x35Oic
      5mfnzRGduYIBrPPDZrU4f03TZoxFxE1moJiUcZQmgrm8h6ZIzYNXpezPdwNBGiwJgIGBhd6t
      rJ9RALlm4RoAAF+LA9ruHpf7TJ7quvYr//lAOPzaEkEqbCQKJqHtNpI34mx200HxYVFtxXMI
      lCIAaOu0c03XfXlQRKkFiG4mKEW0rSiiO/nJ+UjI1BrBMRV/v63rQXny8EMSQtjGllJSTLQX
      LAN+ZozEp0UdgYg5JGCAAGAFZJYoMLOQ8nHvVf25475227Ttl2PP4aOL01f15ech0XyuKtx/
      OX1QoB76VSjy4nyx3Q5Sm2noSTor5Wp5jdIApZcA2qHukGEnvwLAIBCkFBoEA1qrH7vQjIjz
      +ZyZKWcUQj1cnukOqGs+Y4yWtNxk387ytCWQnberAG3bbFbLlBJyekaL6KdFSmkYBmOMQGwU
      OAVeAQK0Vpwv2tPZo2y+dmC6uvyw7gchxLbfaudKCh8vP6zXm+0Ytpt1fgjSyB9CdYOQUqac
      IadN3wttwrhNLLgkADw5PZMCGR5zUv9zYdyu++3AVDabDQEoASUFRgXMCnKIX5dPfBhQWm+D
      lGLsV9erNQO4dial0IIu37+fSEh8sse0WJyenJ8vZq313auzE2vs61fniMJ7d/H2p4s3b16m
      sB2GoS8FxnEgRiKWEoCysk1/9c9xai8uXj/eoRnQe7dZrShHSqkQC8iFlZIotcox7u00ngBC
      mto57dxOfGj/F6k0ADw/eZengnWuXF1F7VqrYi5nJ6dkRQBgRgFUBYQe6dAolOBs2/m8a/t+
      QymQFE3XCslnZw5LSMTm0TpV7omXANpBoBBaL2bdMIxNgwSotAcUi9Oz1pshRN3csavw20Bx
      8fan+rJ68wBANaFoNQA8LhPhnngJoB1cM2/8IKWaz+fee2c0gFYAzswBYPaD6rl/PrwsogH2
      7IVDveIPeZD/h+PHB9DOt+xe3TAPjUPdh5mrF91Tn9GfBk8wAn14/2H16eMYnlEAVTnwyhGr
      jadPfUb3wpdW84+HJwigHIf1kFv/jJYVB74fIh7bzj0s9/mH4SA+/wPwBAGkXff2rLta9j/+
      0LehlhFyzrWPrr5Z+eRPe2J3w8Py3b5xrGfQWPgsEGOsJsht2x4W0bfpur3ggJdd2A5Va4KZ
      h2GoVVX4ljBIbWX/IWf3fPGSB9qheodVj9nvHHWEEHdr7ft3wucprIoHPPX5vOBPBvwz7jJe
      8HzwsgZ6wb3wEkAvuBf+Hw5YFop5YionAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='GDP per capita' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Health spending vs life expectancy' width='192'>
      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
      iQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Interest rates' width='192'>
      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
      t7ffLmuvNNU87jt+VOSyyYHhKYZnAABh19S8L8FZH8J2h0K3QCsw6bi6evP2Bp1rwdnf697z
      2su1ViXpHhmPyzc2FN/q6Uul4vr6bdvL+IGh4euD3tbONl//DX86BfT1B7ZWLbkWJwaGmve+
      sqHaDFKL3dPpjo7auZu3gimSKFl/YJ12KaVoqq9uqy153Df6CJHItTv3PWWSYwAAU0Xb9s4G
      /GE8/NUhIACAyWQi5DKU53MCRhAShULOsQzHpKMZpL2pGkEQlVolkxECS2d5NhJO1LS3ygHQ
      mkxymQxBeI4TCCmhUMgRls7mmFCMbmivJzDMZNATMjkEa3/2c8emDIAg6MNaLLNqBPQFMv3G
      VvWRX7036UkZKttKCWp+fi5AsqjADV46enIw2trRsbla53I45r1x6e/GZ3nT+obrR97pmfFD
      c83GYnRxbm4plLlzvQYB2Il5z2O4o1VOobvx99c9fvjE27mNf7WpON+PW9ur2G5/mQjyxXPP
      /34LXUD3B8zRFMAVa3QFWEGzNgQk8tgo0F0Zwl0ODREpRArUAonJ1NXCavPCvoaYgni83F1A
      cc/E4V//9//5r//Dj3/67s2J8f/7f/tb/9dO6/wSuND17p+9+TcLmft8iuTls1dj6ftNGqSj
      o//pb34cYWDG1f/+hZGvXzB4+fDEgv+XHx/5/Y/x9Pztf30/w9/PUEiO9k3RfzrpfyZ24qN3
      f/XLty8MOvNv7O6pDH1py6vfUjn8sX3Pv9Jmoy5TobOf/CpOG7//+lNj5w/PJlh9+bbXnmzD
      UASyid4xV3OVsndosWq7+mf/+RfKUtOSO1ZWZV1eZv7dX3+79/hhV5yzNW3dpF766fmljZ01
      CwOu6vbG4XNn56MU0DS80I6d6XHEo+kD33kjN3n+2nwcyMr//PW9hAQFAECAlVrxS1eHnq4H
      EICEZ+LkpT4GKJ5++eDVd36B2auCzikTY+cS3uOfvBPHKr/9wk6ZBAECMzka3Nep7ltIbVH7
      3zvbr5HkaESDZgL2Hd9pBPOXB2cFqXnv7urjvz5Xv3t9aoEuqlCeu3IjncM69++auXg2QTO6
      pt2Hnqhfg44drnnyW9+mlsc+H/eBjqo8G7u/IQxRbn/+aSS45JgdvjYUaGmrHbxyMc3xAIBk
      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
    </thumbnail>
    <thumbnail height='192' name='Share of World GDP' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
